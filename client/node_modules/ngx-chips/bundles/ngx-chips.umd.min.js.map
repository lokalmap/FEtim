{"version":3,"file":"ngx-chips.umd.min.js","sources":["~/ngx-chips/modules/core/accessor.ts","~/ngx-chips/modules/core/helpers/listen.ts","~/ngx-chips/modules/core/pipes/highlight.pipe.ts","~/ngx-chips/modules/core/constants/index.ts","~/ngx-chips/modules/core/providers/drag-provider.ts","~/ngx-chips/modules/defaults.ts","~/ngx-chips/modules/core/providers/options-provider.ts","~/ngx-chips/modules/components/tag-input-form/tag-input-form.component.ts","~/ngx-chips/modules/components/dropdown/tag-input-dropdown.component.ts","~/ngx-chips/modules/components/tag/tag-ripple.component.ts","~/ngx-chips/modules/components/tag/tag.component.ts","~/ngx-chips/modules/components/tag-input/animations.ts","~/ngx-chips/modules/components/tag-input/tag-input.ts","~/ngx-chips/modules/components/icon/icon.ts","~/ngx-chips/modules/tag-input.module.ts"],"sourcesContent":["import { ControlValueAccessor } from '@angular/forms';\nimport { Input } from '@angular/core';\nimport { OptionsProvider } from './providers/options-provider';\n\nexport type TagModel = string | {[key: string]: any};\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function isObject(obj: any): boolean {\n    return obj === Object(obj);\n}\nexport class TagInputAccessor implements ControlValueAccessor {\nprivate _items: TagModel[] = [];\nprivate _onTouchedCallback: () => void;\nprivate _onChangeCallback: (items: TagModel[]) => void;\n/**\n * \\@name displayBy\n */\npublic displayBy: string = OptionsProvider.defaults.tagInput.displayBy;\n/**\n * \\@name identifyBy\n */\npublic identifyBy: string = OptionsProvider.defaults.tagInput.identifyBy;\n/**\n * @return {?}\n */\npublic get items(): TagModel[] {\n        return this._items;\n    };\n/**\n * @param {?} items\n * @return {?}\n */\npublic set items(items: TagModel[]) {\n        this._items = items;\n        this._onChangeCallback(this._items);\n    }\n/**\n * @return {?}\n */\npublic onTouched() {\n        this._onTouchedCallback();\n    }\n/**\n * @param {?} items\n * @return {?}\n */\npublic writeValue(items: any[]) {\n        this._items = items || [];\n    }\n/**\n * @param {?} fn\n * @return {?}\n */\npublic registerOnChange(fn: any) {\n        this._onChangeCallback = fn;\n    }\n/**\n * @param {?} fn\n * @return {?}\n */\npublic registerOnTouched(fn: any) {\n        this._onTouchedCallback = fn;\n    }\n/**\n * \\@name getItemValue\n * @param {?} item\n * @return {?}\n */\npublic getItemValue(item: TagModel): string {\n        return isObject(item) ? item[this.identifyBy] : item;\n    }\n/**\n * \\@name getItemDisplay\n * @param {?} item\n * @return {?}\n */\npublic getItemDisplay(item: TagModel): string {\n        return isObject(item) ? item[this.displayBy] : item;\n    }\n/**\n * \\@name getItemsWithout\n * @param {?} index\n * @return {?}\n */\nprotected getItemsWithout(index: number): TagModel[] {\n        return this.items.filter((item, position) => position !== index);\n    }\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'displayBy': [{ type: Input },],\n'identifyBy': [{ type: Input },],\n};\n}\n\nfunction TagInputAccessor_tsickle_Closure_declarations() {\n/** @type {?} */\nTagInputAccessor.propDecorators;\n/** @type {?} */\nTagInputAccessor.prototype._items;\n/** @type {?} */\nTagInputAccessor.prototype._onTouchedCallback;\n/** @type {?} */\nTagInputAccessor.prototype._onChangeCallback;\n/**\n * \\@name displayBy\n * @type {?}\n */\nTagInputAccessor.prototype.displayBy;\n/**\n * \\@name identifyBy\n * @type {?}\n */\nTagInputAccessor.prototype.identifyBy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@name listen\n * @param {?} listenerType\n * @param {?} action\n * @param {?=} condition\n * @return {?}\n */\nexport function listen(listenerType: string, action: () => any, condition = true): void {\n    // if the event provided does not exist, throw an error\n    if (!this.listeners.hasOwnProperty(listenerType)) {\n        throw new Error('The event entered may be wrong');\n    }\n\n    // if a condition is present and is false, exit early\n    if (!condition) {\n        return;\n    }\n\n    // fire listener\n    this.listeners[listenerType].push(action);\n}\n","import {Pipe, PipeTransform} from '@angular/core';\n\nconst /** @type {?} */ escape = s => s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\nexport class HighlightPipe implements PipeTransform {\n/**\n * \\@name transform\n * @param {?} value {string}\n * @param {?} arg {string}\n * @return {?}\n */\npublic transform(value: string, arg: string): string {\n        if (!arg.trim()) {\n            return value;\n        }\n\n        try {\n            const /** @type {?} */ regex = new RegExp(`(${escape(arg)})`, 'i');\n            return value.replace(regex, '<b>$1</b>');\n        } catch ( /** @type {?} */e) {\n            return value;\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{\n    name: 'highlight'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction HighlightPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nHighlightPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHighlightPipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*\n** constants and default values for <tag-input>\n */\n\nexport const /** @type {?} */ PLACEHOLDER = '+ Tag';\nexport const /** @type {?} */ SECONDARY_PLACEHOLDER = 'Enter a new tag';\nexport const /** @type {?} */ KEYDOWN = 'keydown';\nexport const /** @type {?} */ KEYUP = 'keyup';\nexport const /** @type {?} */ FOCUS = 'focus';\nexport const /** @type {?} */ MAX_ITEMS_WARNING = 'The number of items specified was greater than the property max-items.';\n\nexport const /** @type {?} */ ACTIONS_KEYS = {\n    DELETE: 'DELETE',\n    SWITCH_PREV: 'SWITCH_PREV',\n    SWITCH_NEXT: 'SWITCH_NEXT',\n    TAB: 'TAB'\n};\n\nexport const /** @type {?} */ KEY_PRESS_ACTIONS = {\n    8: ACTIONS_KEYS.DELETE,\n    37: ACTIONS_KEYS.SWITCH_PREV,\n    39: ACTIONS_KEYS.SWITCH_NEXT,\n    9: ACTIONS_KEYS.TAB\n};\n\nexport const /** @type {?} */ DRAG_AND_DROP_KEY = 'Text';\nexport const /** @type {?} */ NEXT = 'NEXT';\nexport const /** @type {?} */ PREV = 'PREV';\n\n","import { TagInputComponent } from '../../components/tag-input/tag-input';\nimport { TagModel } from '../accessor';\n\nimport { Injectable } from '@angular/core';\n\nexport declare interface DraggedTag {\n    index: number;\n    tag: TagModel;\n    zone: string;\n}\n\nimport { DRAG_AND_DROP_KEY } from '../../core/constants';\n\nexport declare interface State {\n    dragging: boolean,\n    dropping: boolean,\n    index: number | undefined\n}\n\nexport declare type StateProperty = keyof State;\nexport class DragProvider {\npublic sender: TagInputComponent;\npublic receiver: TagInputComponent;\npublic state: State = {\n        dragging: false,\n        dropping: false,\n        index: undefined\n    };\n/**\n * \\@name setDraggedItem\n * @param {?} event\n * @param {?} tag\n * @return {?}\n */\npublic setDraggedItem(event: DragEvent, tag: DraggedTag): void {\n        event.dataTransfer.setData(DRAG_AND_DROP_KEY, JSON.stringify(tag));\n    }\n/**\n * \\@name getDraggedItem\n * @param {?} event\n * @return {?}\n */\npublic getDraggedItem(event: DragEvent): DraggedTag {\n        const /** @type {?} */ data = event.dataTransfer.getData(DRAG_AND_DROP_KEY);\n\n        return /** @type {?} */(( JSON.parse(data) as DraggedTag));\n    }\n/**\n * \\@name setSender\n * @param {?} sender\n * @return {?}\n */\npublic setSender(sender: TagInputComponent): void {\n        this.sender = sender;\n    }\n/**\n * \\@name setReceiver\n * @param {?} receiver\n * @return {?}\n */\npublic setReceiver(receiver: TagInputComponent): void {\n        this.receiver = receiver;\n    }\n/**\n * \\@name onTagDropped\n * @param {?} tag\n * @param {?} indexDragged\n * @param {?} indexDropped\n * @return {?}\n */\npublic onTagDropped(tag: TagModel, indexDragged: number, indexDropped: number): void {\n        this.onDragEnd();\n\n        this.sender.onRemoveRequested(tag, indexDragged);\n        this.receiver.onAddingRequested(false, tag, indexDropped);\n    }\n/**\n * \\@name setState\n * @param {?} state\n * @return {?}\n */\npublic setState(state: {[K in StateProperty]?: State[K]}): void {\n        this.state = {...this.state, ...state};\n    }\n/**\n * \\@name getState\n * @param {?=} key\n * @return {?}\n */\npublic getState(key?: StateProperty): State | State[StateProperty] {\n        return key ? this.state[key] : this.state;\n    }\n/**\n * \\@name onDragEnd\n * @return {?}\n */\npublic onDragEnd(): void {\n        this.setState({\n            dragging: false,\n            dropping: false,\n            index: undefined\n        });\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DragProvider_tsickle_Closure_declarations() {\n/** @type {?} */\nDragProvider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDragProvider.ctorParameters;\n/** @type {?} */\nDragProvider.prototype.sender;\n/** @type {?} */\nDragProvider.prototype.receiver;\n/** @type {?} */\nDragProvider.prototype.state;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Observable } from 'rxjs/Observable';\nimport { ValidatorFn, AsyncValidatorFn } from '@angular/forms';\n\nimport { SECONDARY_PLACEHOLDER, PLACEHOLDER } from './core/constants';\nimport { TagInputDropdown } from './components/dropdown/tag-input-dropdown.component';\nimport { TagModel } from './core';\n\nexport interface TagInputOptions {\n    separatorKeys: string[];\n    separatorKeyCodes: number[];\n    maxItems: number;\n    placeholder: string;\n    secondaryPlaceholder: string;\n    validators: ValidatorFn[];\n    asyncValidators: AsyncValidatorFn[];\n    onlyFromAutocomplete: boolean;\n    errorMessages: { [key: string]: string; };\n    theme: string;\n    onTextChangeDebounce: number;\n    inputId: string;\n    inputClass: string;\n    clearOnBlur: boolean;\n    hideForm: boolean;\n    addOnBlur: boolean;\n    addOnPaste: boolean;\n    pasteSplitPattern: string;\n    blinkIfDupe: boolean;\n    removable: boolean;\n    editable: boolean;\n    allowDupes: boolean;\n    modelAsStrings: boolean;\n    trimTags: boolean;\n    ripple: boolean;\n    tabIndex: string;\n    disable: boolean;\n    dragZone: string;\n    onRemoving?: (tag: TagModel) => Observable<TagModel>;\n    onAdding?: (tag: TagModel) => Observable<TagModel>;\n    displayBy: string;\n    identifyBy: string;\n    animationDuration: {\n        enter: string,\n        leave: string\n    };\n}\n\nexport interface TagInputDropdownOptions {\n    displayBy: string;\n    identifyBy: string;\n    appendToBody: boolean;\n    offset: string;\n    focusFirstElement: boolean;\n    showDropdownIfEmpty: boolean;\n    minimumTextLength: number;\n    limitItemsTo: number;\n    keepOpen: boolean;\n    matchingFn: (value: string, target: TagModel) => boolean;\n}\n\nexport const /** @type {?} */ defaults = {\n    tagInput: /** @type {?} */(( <TagInputOptions>{\n        separatorKeys: [],\n        separatorKeyCodes: [],\n        maxItems: Infinity,\n        placeholder: PLACEHOLDER,\n        secondaryPlaceholder: SECONDARY_PLACEHOLDER,\n        validators: [],\n        asyncValidators: [],\n        onlyFromAutocomplete: false,\n        errorMessages: {},\n        theme: '',\n        onTextChangeDebounce: 250,\n        inputId: '',\n        inputClass: '',\n        clearOnBlur: false,\n        hideForm: false,\n        addOnBlur: false,\n        addOnPaste: false,\n        pasteSplitPattern: ',',\n        blinkIfDupe: true,\n        removable: true,\n        editable: false,\n        allowDupes: false,\n        modelAsStrings: false,\n        trimTags: true,\n        ripple: true,\n        tabIndex: '',\n        disable: false,\n        dragZone: '',\n        onRemoving: undefined,\n        onAdding: undefined,\n        displayBy: 'display',\n        identifyBy: 'value',\n        animationDuration: {\n            enter: \"250ms\",\n            leave: \"150ms\"\n        }\n    })),\n    dropdown: /** @type {?} */(( <TagInputDropdownOptions>{\n        displayBy: 'display',\n        identifyBy: 'value',\n        appendToBody: true,\n        offset: '50 0',\n        focusFirstElement: false,\n        showDropdownIfEmpty: false,\n        minimumTextLength: 1,\n        limitItemsTo: Infinity,\n        keepOpen: true,\n        matchingFn\n    }))\n};\n/**\n * \\@name matchingFn\n * @this {?}\n * @param {?} value\n * @param {?} target\n * @return {?}\n */\nfunction matchingFn(this: TagInputDropdown, value: string, target: TagModel): boolean {\n    const /** @type {?} */ targetValue = target[this.displayBy].toString();\n\n    return targetValue && targetValue\n        .toLowerCase()\n        .indexOf(value.toLowerCase()) >= 0;\n}\n","import { defaults, TagInputOptions, TagInputDropdownOptions } from '../../defaults';\n\nexport type Options = {\n    tagInput?: {\n        [P in keyof TagInputOptions]?: TagInputOptions[P];\n    };\n    dropdown?: {\n        [P in keyof TagInputDropdownOptions]?: TagInputDropdownOptions[P];\n    }\n}\nexport class OptionsProvider {\npublic static defaults = defaults;\n/**\n * @param {?} options\n * @return {?}\n */\npublic setOptions(options: Options): void {\n        OptionsProvider.defaults.tagInput = {...defaults.tagInput, ...options.tagInput};\n        OptionsProvider.defaults.dropdown = {...defaults.dropdown, ...options.dropdown};\n    }\n}\n\nfunction OptionsProvider_tsickle_Closure_declarations() {\n/** @type {?} */\nOptionsProvider.defaults;\n}\n\n\nexport { TagInputDropdownOptions, TagInputOptions };","import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { AbstractControl, AsyncValidatorFn, FormControl, FormGroup, ValidatorFn } from '@angular/forms';\nexport class TagInputForm {\n/**\n * \\@name onSubmit\n */\npublic onSubmit: EventEmitter<any> = new EventEmitter();\n/**\n * \\@name onBlur\n */\npublic onBlur: EventEmitter<any> = new EventEmitter();\n/**\n * \\@name onFocus\n */\npublic onFocus: EventEmitter<any> = new EventEmitter();\n/**\n * \\@name onKeyup\n */\npublic onKeyup: EventEmitter<any> = new EventEmitter();\n/**\n * \\@name onKeydown\n */\npublic onKeydown: EventEmitter<any> = new EventEmitter();\n/**\n * \\@name placeholder\n */\npublic placeholder: string;\n/**\n * \\@name validators\n */\npublic validators: ValidatorFn[] = [];\n/**\n * \\@name asyncValidators\n * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n */\npublic asyncValidators: AsyncValidatorFn[] = [];\n/**\n * \\@name inputId\n */\npublic inputId: string;\n/**\n * \\@name inputClass\n */\npublic inputClass: string;\n/**\n * \\@name inputText\n * @return {?}\n */\npublic get inputText(): string {\n        return this.inputTextValue;\n    }\n/**\n * \\@name tabindex\n * @desc pass through the specified tabindex to the input\n */\npublic tabindex: string = '';\n/**\n * \\@name disabled\n */\npublic disabled: boolean = false;\n/**\n * \\@name inputText\n * @param {?} text {string}\n * @return {?}\n */\npublic set inputText(text: string) {\n        this.inputTextValue = text;\n        this.inputTextChange.emit(text);\n    }\n/**\n * \\@name input\n */\npublic input;\n/**\n * \\@name form\n */\npublic form: FormGroup;\n/**\n * \\@name inputTextChange\n */\npublic inputTextChange: EventEmitter<string> = new EventEmitter();\n/**\n * \\@name inputTextValue\n */\npublic inputTextValue: string = '';\n/**\n * @return {?}\n */\npublic ngOnInit() {\n        // creating form\n        this.form = new FormGroup({\n            item: new FormControl({value: '', disabled: this.disabled}, this.validators, this.asyncValidators)\n        });\n    }\n/**\n * \\@name value\n * @return {?}\n */\npublic get value(): AbstractControl | null {\n        return this.form.get('item');\n    }\n/**\n * \\@name isInputFocused\n * @return {?}\n */\npublic isInputFocused(): boolean {\n        return document.activeElement === this.input.nativeElement;\n    }\n/**\n * \\@name getErrorMessages\n * @param {?} messages\n * @return {?}\n */\npublic getErrorMessages(messages): string[] {\n        const /** @type {?} */ value = this.value;\n\n        return value ? Object.keys(messages)\n            .filter(err => value.hasError(err))\n            .map(err => messages[err]) : [];\n    }\n/**\n * \\@name hasErrors\n * @return {?}\n */\npublic hasErrors(): boolean {\n        return this.form.dirty &&\n            this.form.value.item &&\n            this.form.invalid;\n    }\n/**\n * \\@name focus\n * @return {?}\n */\npublic focus(): void {\n        this.input.nativeElement.focus();\n    }\n/**\n * \\@name blur\n * @return {?}\n */\npublic blur(): void {\n        this.input.nativeElement.blur();\n    }\n/**\n * \\@name getElementPosition\n * @return {?}\n */\npublic getElementPosition(): ClientRect {\n        return this.input.nativeElement.getBoundingClientRect();\n    }\n/**\n * - removes input from the component\n * \\@name destroy\n * @return {?}\n */\npublic destroy(): void {\n        const /** @type {?} */ input = this.input.nativeElement;\n        input.parentElement.removeChild(input);\n    }\n/**\n * \\@name onKeyDown\n * @param {?} $event\n * @return {?}\n */\npublic onKeyDown($event) {\n        return this.onKeydown.emit($event);\n    }\n/**\n * \\@name submit\n * @param {?} $event\n * @return {?}\n */\npublic submit($event: any): void {\n        this.onSubmit.emit($event);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'tag-input-form',\n    styles: [`\n      .dark tag:focus {\n        -webkit-box-shadow: 0 0 0 1px #323232;\n                box-shadow: 0 0 0 1px #323232; }\n\n      .ng2-tag-input.bootstrap3-info {\n        background-color: #fff;\n        display: inline-block;\n        color: #555;\n        vertical-align: middle;\n        max-width: 100%;\n        height: 42px;\n        line-height: 44px; }\n\n      .ng2-tag-input.bootstrap3-info input {\n        border: none;\n        -webkit-box-shadow: none;\n                box-shadow: none;\n        outline: none;\n        background-color: transparent;\n        padding: 0 6px;\n        margin: 0;\n        width: auto;\n        max-width: inherit; }\n\n      .ng2-tag-input.bootstrap3-info .form-control input::-moz-placeholder {\n        color: #777;\n        opacity: 1; }\n\n      .ng2-tag-input.bootstrap3-info .form-control input:-ms-input-placeholder {\n        color: #777; }\n\n      .ng2-tag-input.bootstrap3-info .form-control input::-webkit-input-placeholder {\n        color: #777; }\n\n      .ng2-tag-input.bootstrap3-info input:focus {\n        border: none;\n        -webkit-box-shadow: none;\n                box-shadow: none; }\n\n      .bootstrap3-info.ng2-tag-input.ng2-tag-input--focused {\n        -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.4);\n                box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.4);\n        border: 1px solid #ccc; }\n\n      .bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid {\n        -webkit-box-shadow: inset 0 1px 1px #d9534f;\n                box-shadow: inset 0 1px 1px #d9534f; }\n\n      .ng2-tag-input {\n        display: block;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        -ms-flex-wrap: wrap;\n            flex-wrap: wrap;\n        position: relative;\n        -webkit-transition: all 0.25s;\n        transition: all 0.25s;\n        padding: 0.25rem 0;\n        min-height: 32px;\n        cursor: text;\n        border-bottom: 2px solid #efefef; }\n        .ng2-tag-input:focus {\n          outline: 0; }\n        .ng2-tag-input.ng2-tag-input--dropping {\n          opacity: 0.7; }\n        .ng2-tag-input.ng2-tag-input--focused {\n          border-bottom: 2px solid #2196F3; }\n        .ng2-tag-input.ng2-tag-input--invalid {\n          border-bottom: 2px solid #f44336; }\n        .ng2-tag-input.ng2-tag-input--loading {\n          border: none; }\n        .ng2-tag-input.ng2-tag-input--disabled {\n          opacity: 0.5;\n          cursor: not-allowed; }\n        .ng2-tag-input form {\n          margin: 0.1em 0; }\n        .ng2-tag-input .ng2-tags-container {\n          -ms-flex-wrap: wrap;\n              flex-wrap: wrap;\n          display: -webkit-box;\n          display: -ms-flexbox;\n          display: flex; }\n\n      .minimal.ng2-tag-input {\n        display: block;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        -ms-flex-wrap: wrap;\n            flex-wrap: wrap;\n        position: relative;\n        cursor: text;\n        border-bottom: 1px solid transparent; }\n        .minimal.ng2-tag-input:focus {\n          outline: 0; }\n        .minimal.ng2-tag-input.ng2-tag-input--dropping {\n          opacity: 0.7; }\n        .minimal.ng2-tag-input.ng2-tag-input--loading {\n          border: none; }\n        .minimal.ng2-tag-input.ng2-tag-input--disabled {\n          opacity: 0.5;\n          cursor: not-allowed; }\n        .minimal.ng2-tag-input .ng2-tags-container {\n          -ms-flex-wrap: wrap;\n              flex-wrap: wrap;\n          display: -webkit-box;\n          display: -ms-flexbox;\n          display: flex; }\n\n      .dark.ng2-tag-input {\n        display: block;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        -ms-flex-wrap: wrap;\n            flex-wrap: wrap;\n        position: relative;\n        cursor: text;\n        border-bottom: 2px solid #444; }\n        .dark.ng2-tag-input:focus {\n          outline: 0; }\n        .dark.ng2-tag-input.ng2-tag-input--dropping {\n          opacity: 0.7; }\n        .dark.ng2-tag-input.ng2-tag-input--loading {\n          border: none; }\n        .dark.ng2-tag-input.ng2-tag-input--disabled {\n          opacity: 0.5;\n          cursor: not-allowed; }\n        .dark.ng2-tag-input .ng2-tags-container {\n          -ms-flex-wrap: wrap;\n              flex-wrap: wrap;\n          display: -webkit-box;\n          display: -ms-flexbox;\n          display: flex; }\n\n      .bootstrap.ng2-tag-input {\n        display: block;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        -ms-flex-wrap: wrap;\n            flex-wrap: wrap;\n        position: relative;\n        cursor: text;\n        border-bottom: 2px solid #efefef; }\n        .bootstrap.ng2-tag-input:focus {\n          outline: 0; }\n        .bootstrap.ng2-tag-input.ng2-tag-input--dropping {\n          opacity: 0.7; }\n        .bootstrap.ng2-tag-input.ng2-tag-input--focused {\n          border-bottom: 2px solid #0275d8; }\n        .bootstrap.ng2-tag-input.ng2-tag-input--invalid {\n          border-bottom: 2px solid #d9534f; }\n        .bootstrap.ng2-tag-input.ng2-tag-input--loading {\n          border: none; }\n        .bootstrap.ng2-tag-input.ng2-tag-input--disabled {\n          opacity: 0.5;\n          cursor: not-allowed; }\n        .bootstrap.ng2-tag-input .ng2-tags-container {\n          -ms-flex-wrap: wrap;\n              flex-wrap: wrap;\n          display: -webkit-box;\n          display: -ms-flexbox;\n          display: flex; }\n\n      .bootstrap3-info.ng2-tag-input {\n        display: block;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        -ms-flex-wrap: wrap;\n            flex-wrap: wrap;\n        position: relative;\n        padding: 4px;\n        cursor: text;\n        -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n                box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n        border-radius: 4px; }\n        .bootstrap3-info.ng2-tag-input:focus {\n          outline: 0; }\n        .bootstrap3-info.ng2-tag-input.ng2-tag-input--dropping {\n          opacity: 0.7; }\n        .bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid {\n          border-bottom: 1px solid #d9534f; }\n        .bootstrap3-info.ng2-tag-input.ng2-tag-input--loading {\n          border: none; }\n        .bootstrap3-info.ng2-tag-input.ng2-tag-input--disabled {\n          opacity: 0.5;\n          cursor: not-allowed; }\n        .bootstrap3-info.ng2-tag-input form {\n          margin: 0.1em 0; }\n        .bootstrap3-info.ng2-tag-input .ng2-tags-container {\n          -ms-flex-wrap: wrap;\n              flex-wrap: wrap;\n          display: -webkit-box;\n          display: -ms-flexbox;\n          display: flex; }\n\n      .error-message {\n        font-size: 0.8em;\n        color: #f44336;\n        margin: 0.5em 0 0 0; }\n\n      .bootstrap .error-message {\n        color: #d9534f; }\n\n      .ng2-tag-input__text-input {\n        display: inline;\n        vertical-align: middle;\n        border: none;\n        padding: 0 0.5rem;\n        height: 38px;\n        font-size: 1em;\n        font-family: \"Roboto\", \"Helvetica Neue\", sans-serif; }\n        .ng2-tag-input__text-input:focus {\n          outline: 0; }\n        .ng2-tag-input__text-input[disabled=true] {\n          opacity: 0.5;\n          background: #fff; }\n    `],\n    template: `\n      <!-- form -->\n      <form (submit)=\"submit($event)\" [formGroup]=\"form\">\n          <input #input\n\n                 type=\"text\"\n                 class=\"ng2-tag-input__text-input\"\n                 autocomplete=\"off\"\n                 tabindex=\"{{ disabled ? -1 : tabindex ? tabindex : 0 }}\"\n                 minlength=\"1\"\n\n                 [(ngModel)]=\"inputText\"\n                 [formControlName]=\"'item'\"\n                 [ngClass]=\"inputClass\"\n                 [attr.id]=\"inputId\"\n                 [attr.placeholder]=\"placeholder\"\n                 [attr.aria-label]=\"placeholder\"\n                 [attr.tabindex]=\"tabindex\"\n                 [attr.disabled]=\"disabled ? disabled : null\"\n\n                 (focus)=\"onFocus.emit($event)\"\n                 (blur)=\"onBlur.emit($event)\"\n                 (keydown)=\"onKeyDown($event)\"\n                 (keyup)=\"onKeyup.emit($event)\"\n          />\n      </form>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onSubmit': [{ type: Output },],\n'onBlur': [{ type: Output },],\n'onFocus': [{ type: Output },],\n'onKeyup': [{ type: Output },],\n'onKeydown': [{ type: Output },],\n'placeholder': [{ type: Input },],\n'validators': [{ type: Input },],\n'asyncValidators': [{ type: Input },],\n'inputId': [{ type: Input },],\n'inputClass': [{ type: Input },],\n'inputText': [{ type: Input },],\n'tabindex': [{ type: Input },],\n'disabled': [{ type: Input },],\n'input': [{ type: ViewChild, args: ['input', ] },],\n'inputTextChange': [{ type: Output },],\n};\n}\n\nfunction TagInputForm_tsickle_Closure_declarations() {\n/** @type {?} */\nTagInputForm.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTagInputForm.ctorParameters;\n/** @type {?} */\nTagInputForm.propDecorators;\n/**\n * \\@name onSubmit\n * @type {?}\n */\nTagInputForm.prototype.onSubmit;\n/**\n * \\@name onBlur\n * @type {?}\n */\nTagInputForm.prototype.onBlur;\n/**\n * \\@name onFocus\n * @type {?}\n */\nTagInputForm.prototype.onFocus;\n/**\n * \\@name onKeyup\n * @type {?}\n */\nTagInputForm.prototype.onKeyup;\n/**\n * \\@name onKeydown\n * @type {?}\n */\nTagInputForm.prototype.onKeydown;\n/**\n * \\@name placeholder\n * @type {?}\n */\nTagInputForm.prototype.placeholder;\n/**\n * \\@name validators\n * @type {?}\n */\nTagInputForm.prototype.validators;\n/**\n * \\@name asyncValidators\n * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n * @type {?}\n */\nTagInputForm.prototype.asyncValidators;\n/**\n * \\@name inputId\n * @type {?}\n */\nTagInputForm.prototype.inputId;\n/**\n * \\@name inputClass\n * @type {?}\n */\nTagInputForm.prototype.inputClass;\n/**\n * \\@name tabindex\n * @desc pass through the specified tabindex to the input\n * @type {?}\n */\nTagInputForm.prototype.tabindex;\n/**\n * \\@name disabled\n * @type {?}\n */\nTagInputForm.prototype.disabled;\n/**\n * \\@name input\n * @type {?}\n */\nTagInputForm.prototype.input;\n/**\n * \\@name form\n * @type {?}\n */\nTagInputForm.prototype.form;\n/**\n * \\@name inputTextChange\n * @type {?}\n */\nTagInputForm.prototype.inputTextChange;\n/**\n * \\@name inputTextValue\n * @type {?}\n */\nTagInputForm.prototype.inputTextValue;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    Component,\n    ContentChildren,\n    EventEmitter,\n    forwardRef,\n    HostListener,\n    Injector,\n    Input,\n    QueryList,\n    TemplateRef,\n    Type,\n    ViewChild,\n} from '@angular/core';\n\n// rx\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/first';\nimport'rxjs/add/operator/debounceTime';\n\nimport { Ng2Dropdown, Ng2MenuItem } from 'ng2-material-dropdown';\nimport { OptionsProvider } from '../../core/providers/options-provider';\nimport { TagInputComponent } from '../tag-input/tag-input';\nimport { TagInputDropdownOptions } from '../../defaults';\nimport { TagModel } from '../../core/accessor';\n\nconst /** @type {?} */ defaults: Type<TagInputDropdownOptions> = forwardRef(() => OptionsProvider.defaults.dropdown);\nexport class TagInputDropdown {\n/**\n * \\@name dropdown\n */\npublic dropdown: Ng2Dropdown;\n/**\n * \\@name menuTemplate\n * @desc reference to the template if provided by the user\n */\npublic templates: QueryList<TemplateRef<any>>;\n/**\n * \\@name offset\n */\npublic offset: string = new defaults().offset;\n/**\n * \\@name focusFirstElement\n */\npublic focusFirstElement = new defaults().focusFirstElement;\n/**\n * - show autocomplete dropdown if the value of input is empty\n * \\@name showDropdownIfEmpty\n */\npublic showDropdownIfEmpty = new defaults().showDropdownIfEmpty;\n/**\n * \\@description observable passed as input which populates the autocomplete items\n * \\@name autocompleteObservable\n */\npublic autocompleteObservable: (text: string) => Observable<any>;\n/**\n * - desc minimum text length in order to display the autocomplete dropdown\n * \\@name minimumTextLength\n */\npublic minimumTextLength = new defaults().minimumTextLength;\n/**\n * - number of items to display in the autocomplete dropdown\n * \\@name limitItemsTo\n */\npublic limitItemsTo: number = new defaults().limitItemsTo;\n/**\n * \\@name displayBy\n */\npublic displayBy = new defaults().displayBy;\n/**\n * \\@name identifyBy\n */\npublic identifyBy = new defaults().identifyBy;\n/**\n * \\@description a function a developer can use to implement custom matching for the autocomplete\n * \\@name matchingFn\n */\npublic matchingFn: (value: string, target: TagModel) => boolean = new defaults().matchingFn;\n/**\n * \\@name appendToBody\n */\npublic appendToBody = new defaults().appendToBody;\n/**\n * \\@name keepOpen\n * \\@description option to leave dropdown open when adding a new item\n */\npublic keepOpen = new defaults().keepOpen;\n/**\n * list of items that match the current value of the input (for autocomplete)\n * \\@name items\n */\npublic items: TagModel[] = [];\n/**\n * \\@name tagInput\n */\npublic tagInput: TagInputComponent = this.injector.get(TagInputComponent);\n/**\n * \\@name _autocompleteItems\n */\nprivate _autocompleteItems: TagModel[] = [];\n/**\n * \\@name autocompleteItems\n * @param {?} items\n * @return {?}\n */\npublic set autocompleteItems(items: TagModel[]) {\n        this._autocompleteItems = items;\n    }\n/**\n * \\@name autocompleteItems\n * @desc array of items that will populate the autocomplete\n * @return {?}\n */\npublic get autocompleteItems(): TagModel[] {\n        const /** @type {?} */ items = this._autocompleteItems;\n\n        if (!items) {\n            return [];\n        }\n\n        return items.map((item: TagModel) => {\n            return typeof item === 'string' ? {\n                [this.displayBy]: item,\n                [this.identifyBy]: item\n            } : item;\n        });\n    }\n/**\n * @param {?} injector\n */\nconstructor(private readonly injector: Injector) {}\n/**\n * \\@name ngOnInit\n * @return {?}\n */\npublic ngOnInit(): void {\n        this.onItemClicked().subscribe(this.requestAdding);\n\n        // reset itemsMatching array when the dropdown is hidden\n        this.onHide().subscribe(this.resetItems);\n\n        const /** @type {?} */ DEBOUNCE_TIME = 200;\n        const /** @type {?} */ KEEP_OPEN = this.keepOpen;\n\n        this.tagInput\n            .onTextChange\n            .asObservable()\n            .debounceTime(DEBOUNCE_TIME)\n            .filter((value: string) => {\n                if (KEEP_OPEN === false) {\n                    return value.length > 0;\n                }\n\n                return true;\n            })\n            .subscribe(this.show);\n    }\n/**\n * \\@name updatePosition\n * @return {?}\n */\npublic updatePosition(): void {\n        const /** @type {?} */ position = this.tagInput.inputForm.getElementPosition();\n\n        this.dropdown.menu.updatePosition(position);\n    }\n/**\n * \\@name isVisible\n * @return {?}\n */\npublic get isVisible(): boolean {\n        return this.dropdown.menu.state.menuState.isVisible;\n    }\n/**\n * \\@name onHide\n * @return {?}\n */\npublic onHide(): EventEmitter<Ng2Dropdown> {\n        return this.dropdown.onHide;\n    }\n/**\n * \\@name onItemClicked\n * @return {?}\n */\npublic onItemClicked(): EventEmitter<string> {\n        return this.dropdown.onItemClicked;\n    }\n/**\n * \\@name selectedItem\n * @return {?}\n */\npublic get selectedItem(): Ng2MenuItem {\n        return this.dropdown.menu.state.dropdownState.selectedItem;\n    }\n/**\n * \\@name state\n * @return {?}\n */\npublic get state(): any {\n        return this.dropdown.menu.state;\n    }\n/**\n *\n * \\@name show\n */\npublic show = (): void => {\n        const maxItemsReached = this.tagInput.items.length === this.tagInput.maxItems;\n        const value = this.getFormValue();\n        const hasMinimumText = value.trim().length >= this.minimumTextLength;\n        const position = this.calculatePosition();\n        const items = this.getMatchingItems(value);\n        const hasItems = items.length > 0;\n        const isHidden = this.isVisible === false;\n        const showDropdownIfEmpty = this.showDropdownIfEmpty && hasItems && !value;\n        const assertions = [];\n\n        const shouldShow = isHidden && ((hasItems && hasMinimumText) || showDropdownIfEmpty);\n        const shouldHide = this.isVisible && !hasItems;\n\n        if (this.autocompleteObservable && hasMinimumText) {\n            return this.getItemsFromObservable(value);\n        }\n\n        if (!this.showDropdownIfEmpty && !value) {\n            return this.dropdown.hide();\n        }\n\n        if (maxItemsReached) {\n            return this.dropdown.hide();\n        }\n\n        this.setItems(items);\n\n        if (shouldShow) {\n            this.dropdown.show(position);\n        } else if (shouldHide) {\n            this.hide();\n        }\n    }\n/**\n * \\@name hide\n * @return {?}\n */\npublic hide(): void {\n        this.resetItems();\n        this.dropdown.hide();\n    }\n/**\n * \\@name scrollListener\n * @return {?}\n */\npublic scrollListener(): void {\n        if (!this.isVisible) {\n            return;\n        }\n\n        this.updatePosition();\n    }\n/**\n * \\@name onWindowBlur\n * @return {?}\n */\npublic onWindowBlur(): void {\n        this.dropdown.hide();\n    }\n/**\n * \\@name getFormValue\n * @return {?}\n */\nprivate getFormValue(): string {\n        return this.tagInput.formValue.trim();\n    }\n/**\n * \\@name calculatePosition\n * @return {?}\n */\nprivate calculatePosition(): ClientRect {\n        return this.tagInput.inputForm.getElementPosition();\n    }\n/**\n * \\@name requestAdding\n * @param item {Ng2MenuItem}\n */\nprivate requestAdding = (item: Ng2MenuItem): void => {\n        this.tagInput.onAddingRequested(true, this.createTagModel(item));\n    }\n/**\n * \\@name createTagModel\n * @param {?} item\n * @return {?}\n */\nprivate createTagModel(item: Ng2MenuItem): TagModel {\n        const /** @type {?} */ display = typeof item.value === 'string' ? item.value : item.value[this.displayBy];\n        const /** @type {?} */ value = typeof item.value === 'string' ? item.value : item.value[this.identifyBy];\n\n        return {\n            ...item.value,\n            [this.tagInput.displayBy]: display,\n            [this.tagInput.identifyBy]: value\n        };\n    }\n/**\n *\n * @param {?} value {string}\n * @return {?}\n */\nprivate getMatchingItems(value: string): TagModel[] {\n        if (!value && !this.showDropdownIfEmpty) {\n            return [];\n        }\n\n        const /** @type {?} */ dupesAllowed = this.tagInput.allowDupes;\n\n        return this.autocompleteItems.filter((item: TagModel) => {\n            const /** @type {?} */ hasValue: boolean = dupesAllowed ? false : this.tagInput.tags.some(tag => {\n                const /** @type {?} */ identifyBy = this.tagInput.identifyBy;\n                const /** @type {?} */ model = typeof tag.model === 'string' ? tag.model : tag.model[identifyBy];\n\n                return model === item[this.identifyBy];\n            });\n\n            return this.matchingFn(value, item) && (hasValue === false);\n        });\n    }\n/**\n * \\@name setItems\n * @param {?} items\n * @return {?}\n */\nprivate setItems(items: TagModel[]): void {\n        this.items = items.slice(0, this.limitItemsTo || items.length);\n    }\n/**\n * \\@name resetItems\n */\nprivate resetItems = (): void => {\n        this.items = [];\n    }\n/**\n * \\@name populateItems\n * @param {?} data\n * @return {?}\n */\nprivate populateItems(data: any): TagInputDropdown {\n        this.autocompleteItems = data.map(item => {\n            return typeof item === 'string' ? {\n                [this.displayBy]: item,\n                [this.identifyBy]: item\n            } : item;\n        });\n\n        return this;\n    }\n/**\n * \\@name getItemsFromObservable\n * @param text\n */\nprivate getItemsFromObservable = (text: string): void => {\n        this.setLoadingState(true);\n\n        const subscribeFn = (data: any[]) => {\n            // hide loading animation\n            this.setLoadingState(false)\n                // add items\n                .populateItems(data);\n\n            this.setItems(this.getMatchingItems(text));\n\n            if (this.items.length) {\n                this.dropdown.show(this.calculatePosition());\n            } else if (!this.showDropdownIfEmpty && this.isVisible) {\n                this.dropdown.hide();\n            }\n        };\n\n        this.autocompleteObservable(text)\n            .first()\n            .subscribe(subscribeFn, () => this.setLoadingState(false));\n    }\n/**\n * \\@name setLoadingState\n * @param {?} state\n * @return {?}\n */\nprivate setLoadingState(state: boolean): TagInputDropdown {\n        this.tagInput.isLoading = state;\n\n        return this;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'tag-input-dropdown',\n    template: `\n      <ng2-dropdown>\n          <ng2-dropdown-menu [focusFirstElement]=\"focusFirstElement\"\n                             [appendToBody]=\"appendToBody\"\n                             [offset]=\"offset\">\n              <ng2-menu-item *ngFor=\"let item of items; let index = index; let last = last\"\n                             [value]=\"item\"\n                             [ngSwitch]=\"!!templates.length\">\n\n                  <span *ngSwitchCase=\"false\"\n                        [innerHTML]=\"item[displayBy] | highlight : tagInput.inputForm.value.value\">\n                  </span>\n\n                  <ng-template *ngSwitchDefault\n                            [ngTemplateOutlet]=\"templates.first\"\n                            [ngTemplateOutletContext]=\"{ item: item, index: index, last: last }\">\n                  </ng-template>\n              </ng2-menu-item>\n          </ng2-dropdown-menu>\n      </ng2-dropdown>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'dropdown': [{ type: ViewChild, args: [Ng2Dropdown, ] },],\n'templates': [{ type: ContentChildren, args: [TemplateRef, ] },],\n'offset': [{ type: Input },],\n'focusFirstElement': [{ type: Input },],\n'showDropdownIfEmpty': [{ type: Input },],\n'autocompleteObservable': [{ type: Input },],\n'minimumTextLength': [{ type: Input },],\n'limitItemsTo': [{ type: Input },],\n'displayBy': [{ type: Input },],\n'identifyBy': [{ type: Input },],\n'matchingFn': [{ type: Input },],\n'appendToBody': [{ type: Input },],\n'keepOpen': [{ type: Input },],\n'autocompleteItems': [{ type: Input },],\n'scrollListener': [{ type: HostListener, args: ['window:scroll', ] },],\n'onWindowBlur': [{ type: HostListener, args: ['window:blur', ] },],\n};\n}\n\nfunction TagInputDropdown_tsickle_Closure_declarations() {\n/** @type {?} */\nTagInputDropdown.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTagInputDropdown.ctorParameters;\n/** @type {?} */\nTagInputDropdown.propDecorators;\n/**\n * \\@name dropdown\n * @type {?}\n */\nTagInputDropdown.prototype.dropdown;\n/**\n * \\@name menuTemplate\n * @desc reference to the template if provided by the user\n * @type {?}\n */\nTagInputDropdown.prototype.templates;\n/**\n * \\@name offset\n * @type {?}\n */\nTagInputDropdown.prototype.offset;\n/**\n * \\@name focusFirstElement\n * @type {?}\n */\nTagInputDropdown.prototype.focusFirstElement;\n/**\n * - show autocomplete dropdown if the value of input is empty\n * \\@name showDropdownIfEmpty\n * @type {?}\n */\nTagInputDropdown.prototype.showDropdownIfEmpty;\n/**\n * \\@description observable passed as input which populates the autocomplete items\n * \\@name autocompleteObservable\n * @type {?}\n */\nTagInputDropdown.prototype.autocompleteObservable;\n/**\n * - desc minimum text length in order to display the autocomplete dropdown\n * \\@name minimumTextLength\n * @type {?}\n */\nTagInputDropdown.prototype.minimumTextLength;\n/**\n * - number of items to display in the autocomplete dropdown\n * \\@name limitItemsTo\n * @type {?}\n */\nTagInputDropdown.prototype.limitItemsTo;\n/**\n * \\@name displayBy\n * @type {?}\n */\nTagInputDropdown.prototype.displayBy;\n/**\n * \\@name identifyBy\n * @type {?}\n */\nTagInputDropdown.prototype.identifyBy;\n/**\n * \\@description a function a developer can use to implement custom matching for the autocomplete\n * \\@name matchingFn\n * @type {?}\n */\nTagInputDropdown.prototype.matchingFn;\n/**\n * \\@name appendToBody\n * @type {?}\n */\nTagInputDropdown.prototype.appendToBody;\n/**\n * \\@name keepOpen\n * \\@description option to leave dropdown open when adding a new item\n * @type {?}\n */\nTagInputDropdown.prototype.keepOpen;\n/**\n * list of items that match the current value of the input (for autocomplete)\n * \\@name items\n * @type {?}\n */\nTagInputDropdown.prototype.items;\n/**\n * \\@name tagInput\n * @type {?}\n */\nTagInputDropdown.prototype.tagInput;\n/**\n * \\@name _autocompleteItems\n * @type {?}\n */\nTagInputDropdown.prototype._autocompleteItems;\n/**\n *\n * \\@name show\n * @type {?}\n */\nTagInputDropdown.prototype.show;\n/**\n * \\@name requestAdding\n * \\@param item {Ng2MenuItem}\n * @type {?}\n */\nTagInputDropdown.prototype.requestAdding;\n/**\n * \\@name resetItems\n * @type {?}\n */\nTagInputDropdown.prototype.resetItems;\n/**\n * \\@name getItemsFromObservable\n * \\@param text\n * @type {?}\n */\nTagInputDropdown.prototype.getItemsFromObservable;\n/** @type {?} */\nTagInputDropdown.prototype.injector;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    Component,\n    animate,\n    trigger,\n    style,\n    transition,\n    keyframes,\n    state,\n    Input\n} from '@angular/core';\nexport class TagRipple {\npublic state: string = 'none';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'tag-ripple',\n    styles: [`\n        :host {\n            width: 100%;\n            height: 100%;\n            left: 0;\n            overflow: hidden;\n            position: absolute;\n        }\n        \n        .tag-ripple {\n            background: rgba(0, 0, 0, 0.1);\n            top: 50%;\n            left: 50%;\n            height: 100%;\n            transform: translate(-50%, -50%);\n            position: absolute;\n        }\n    `],\n    template: `\n        <div class=\"tag-ripple\" [@ink]=\"state\"></div>\n    `,\n    animations: [\n        trigger('ink', [\n            state('none', style({width: 0, opacity: 0})),\n            transition('none => clicked', [\n                animate(300, keyframes([\n                    style({opacity: 1, offset: 0, width: '30%', borderRadius: '100%'}),\n                    style({opacity: 1, offset: 0.5, width: '50%'}),\n                    style({opacity: 0.5, offset: 1, width: '100%', borderRadius: '16px'})\n                ]))\n            ])\n        ])\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n};\n}\n\nfunction TagRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nTagRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTagRipple.ctorParameters;\n/** @type {?} */\nTagRipple.propDecorators;\n/** @type {?} */\nTagRipple.prototype.state;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    TemplateRef,\n    ElementRef,\n    HostListener,\n    HostBinding,\n    ViewChild,\n    ChangeDetectorRef,\n    Renderer2\n} from '@angular/core';\n\nimport { TagModel } from '../../core/accessor';\nimport { TagRipple } from '../tag/tag-ripple.component';\n\n// angular universal hacks\n/* tslint:disable-next-line */\nconst /** @type {?} */ KeyboardEvent = ( /** @type {?} */((global as any))).KeyboardEvent;\nconst /** @type {?} */ MouseEvent = ( /** @type {?} */((global as any))).MouseEvent;\n\n// mocking navigator\nconst /** @type {?} */ navigator = typeof window !== 'undefined' ? window.navigator : {\n    userAgent: 'Chrome',\n    vendor: 'Google Inc'\n};\n\nconst /** @type {?} */ isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\nexport class TagComponent {\n/**\n * \\@name model {TagModel}\n */\npublic model: TagModel;\n/**\n * \\@name removable {boolean}\n */\npublic removable: boolean;\n/**\n * \\@name editable {boolean}\n */\npublic editable: boolean;\n/**\n * \\@name template {TemplateRef<any>}\n */\npublic template: TemplateRef<any>;\n/**\n * \\@name displayBy {string}\n */\npublic displayBy: string;\n/**\n * \\@name identifyBy {string}\n */\npublic identifyBy: string;\n/**\n * \\@name index {number}\n */\npublic index: number;\n/**\n * \\@name hasRipple\n */\npublic hasRipple: boolean;\n/**\n * \\@name disabled\n */\npublic disabled = false;\n/**\n * \\@name onSelect\n */\npublic onSelect: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n/**\n * \\@name onRemove\n */\npublic onRemove: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n/**\n * \\@name onBlur\n */\npublic onBlur: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n/**\n * \\@name onKeyDown\n */\npublic onKeyDown: EventEmitter<any> = new EventEmitter<any>();\n/**\n * \\@name onTagEdited\n */\npublic onTagEdited: EventEmitter<TagModel> = new EventEmitter<TagModel>();\n/**\n * \\@name readonly {boolean}\n * @return {?}\n */\npublic get readonly(): boolean {\n        return typeof this.model !== 'string' && this.model.readonly === true;\n    };\n/**\n * \\@name editing\n */\npublic editing = false;\n/**\n * \\@name moving\n */\npublic moving: boolean;\n/**\n * \\@name rippleState\n */\npublic rippleState = 'none';\n/**\n * \\@name ripple {TagRipple}\n */\npublic ripple: TagRipple;\n/**\n * @param {?} element\n * @param {?} renderer\n * @param {?} cdRef\n */\nconstructor(public element: ElementRef,\npublic renderer: Renderer2,\nprivate cdRef: ChangeDetectorRef) {}\n/**\n * \\@name select\n * @param {?=} $event\n * @return {?}\n */\npublic select($event?: MouseEvent): void {\n        if (this.readonly || this.disabled) {\n            return;\n        }\n\n        if ($event) {\n            $event.stopPropagation();\n        }\n\n        this.focus();\n\n        this.onSelect.emit(this.model);\n    }\n/**\n * \\@name remove\n * @param {?} $event\n * @return {?}\n */\npublic remove($event: MouseEvent): void {\n        $event.stopPropagation();\n        this.onRemove.emit(this);\n    }\n/**\n * \\@name focus\n * @return {?}\n */\npublic focus(): void {\n        this.element.nativeElement.focus();\n    }\n/**\n * @return {?}\n */\npublic move(): void {\n        this.moving = true;\n    }\n/**\n * \\@name keydown\n * @param {?} event\n * @return {?}\n */\npublic keydown(event: KeyboardEvent): void {\n        if (this.editing) {\n            event.keyCode === 13 ? this.disableEditMode(event) : undefined;\n            return;\n        }\n\n        this.onKeyDown.emit({event, model: this.model});\n    }\n/**\n * \\@name blink\n * @return {?}\n */\npublic blink(): void {\n        const /** @type {?} */ classList = this.element.nativeElement.classList;\n        classList.add('blink');\n\n        setTimeout(() => classList.remove('blink'), 50);\n    }\n/**\n * \\@name toggleEditMode\n * @return {?}\n */\npublic toggleEditMode(): void {\n        if (this.editable) {\n            this.editing ? undefined : this.activateEditMode();\n        }\n    }\n/**\n * \\@name onBlurred\n * @param {?} event\n * @return {?}\n */\npublic onBlurred(event: any): void {\n        // Checks if it is editable first before handeling the onBlurred event in order to prevent\n        // a bug in IE where tags are still editable with onlyFromAutocomplete set to true\n\t\tif (!this.editable) {\n\t\t\treturn;\n        }\n\n        this.disableEditMode();\n\n        const /** @type {?} */ value: string = event.target.innerText;\n        const /** @type {?} */ result = typeof this.model === 'string' ? value :\n            {...this.model, [this.displayBy]: value};\n\n        this.onBlur.emit(result);\n    }\n/**\n * \\@name getDisplayValue\n * @param {?} item\n * @return {?}\n */\npublic getDisplayValue(item: TagModel): string {\n        return typeof item === 'string' ? item : item[this.displayBy];\n    }\n/**\n * @desc returns whether the ripple is visible or not\n * only works in Chrome\n * \\@name isRippleVisible\n * @return {?}\n */\npublic get isRippleVisible(): boolean {\n        return !this.readonly &&\n            !this.editing &&\n            isChrome &&\n            this.hasRipple;\n    }\n/**\n * \\@name disableEditMode\n * @param {?=} $event\n * @return {?}\n */\npublic disableEditMode($event?: KeyboardEvent): void {\n        const /** @type {?} */ classList = this.element.nativeElement.classList;\n        const /** @type {?} */ input = this.getContentEditableText();\n\n        this.editing = false;\n        classList.remove('tag--editing');\n\n        if (!input) {\n            this.setContentEditableText(this.model);\n            return;\n        }\n\n        this.storeNewValue(input);\n        this.cdRef.detectChanges();\n\n        if ($event) {\n            $event.preventDefault();\n        }\n    }\n/**\n * \\@name isDeleteIconVisible\n * @return {?}\n */\npublic isDeleteIconVisible(): boolean {\n        return !this.readonly &&\n            !this.disabled &&\n            this.removable &&\n            !this.editing;\n    }\n/**\n * \\@name getContentEditableText\n * @return {?}\n */\nprivate getContentEditableText(): string {\n        const /** @type {?} */ input = this.getContentEditable();\n\n        return input ? input.innerText.trim() : '';\n    }\n/**\n * \\@name setContentEditableText\n * @param {?} model\n * @return {?}\n */\nprivate setContentEditableText(model: TagModel) {\n        const /** @type {?} */ input = this.getContentEditable();\n        const /** @type {?} */ value = this.getDisplayValue(model);\n\n        input.innerText = value;\n    }\n/**\n * \\@name\n * @return {?}\n */\nprivate activateEditMode(): void {\n        const /** @type {?} */ classList = this.element.nativeElement.classList;\n        classList.add('tag--editing');\n\n        this.editing = true;\n    }\n/**\n * \\@name storeNewValue\n * @param {?} input\n * @return {?}\n */\nprivate storeNewValue(input: string): void {\n        const /** @type {?} */ exists = (model: TagModel) => {\n            return typeof model === 'string' ?\n                model === input :\n                model[this.displayBy] === input;\n        };\n\n        const /** @type {?} */ hasId = () => {\n            return this.model[this.identifyBy] !== this.model[this.displayBy];\n        };\n\n        // if the value changed, replace the value in the model\n        if (exists(this.model)) {\n            return;\n        }\n\n        const /** @type {?} */ model = typeof this.model === 'string' ? input :\n            {\n                [this.identifyBy]: hasId() ? this.model[this.identifyBy] : input,\n                [this.displayBy]: input\n            };\n\n        // emit output\n        this.model = model;\n        this.onTagEdited.emit(model);\n    }\n/**\n * \\@name getContentEditable\n * @return {?}\n */\nprivate getContentEditable(): HTMLInputElement {\n        return this.element.nativeElement.querySelector('[contenteditable]');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'tag',\n    template: `\n      <div (click)=\"select($event)\"\n           (dblclick)=\"toggleEditMode()\"\n           (mousedown)=\"rippleState='clicked'\"\n           (mouseup)=\"rippleState='none'\"\n           [ngSwitch]=\"!!template\"\n           [class.disabled]=\"disabled\"\n           [attr.tabindex]=\"-1\"\n           [attr.aria-label]=\"getDisplayValue(model)\">\n\n          <div *ngSwitchCase=\"true\" [attr.contenteditable]=\"editing\">\n              <!-- CUSTOM TEMPLATE -->\n              <ng-template\n                  [ngTemplateOutletContext]=\"{ item: model, index: index }\"\n                  [ngTemplateOutlet]=\"template\">\n              </ng-template>\n          </div>\n\n          <div *ngSwitchCase=\"false\" class=\"tag-wrapper\">\n              <!-- TAG NAME -->\n              <div [attr.contenteditable]=\"editing\"\n                   [attr.title]=\"getDisplayValue(model)\"\n                   class=\"tag__text inline\"\n                   spellcheck=\"false\"\n                   (keydown.enter)=\"disableEditMode($event)\"\n                   (keydown.escape)=\"disableEditMode($event)\"\n                   (click)=\"editing ? $event.stopPropagation() : undefined\"\n                   (blur)=\"onBlurred($event)\">\n                  {{ getDisplayValue(model) }}\n              </div>\n\n              <!-- 'X' BUTTON -->\n              <delete-icon\n                  aria-label=\"Remove tag\"\n                  role=\"button\"\n                  (click)=\"remove($event)\"\n                  *ngIf=\"isDeleteIconVisible()\">\n              </delete-icon>\n          </div>\n      </div>\n\n      <tag-ripple [state]=\"rippleState\"\n                  [attr.tabindex]=\"-1\"\n                  *ngIf=\"isRippleVisible\">\n      </tag-ripple>\n    `,\n    styles: [`\n      :host,\n      :host > div,\n      :host > div:focus {\n        outline: 0;\n        overflow: hidden;\n        -webkit-transition: opacity 1s;\n        transition: opacity 1s;\n        z-index: 1; }\n\n      :host {\n        max-width: 400px; }\n\n      :host.blink {\n        -webkit-animation: blink 0.3s normal forwards ease-in-out;\n        animation: blink 0.3s normal forwards ease-in-out; }\n\n      @-webkit-keyframes blink {\n        0% {\n          opacity: 0.3; } }\n\n      @keyframes blink {\n        0% {\n          opacity: 0.3; } }\n\n      :host .disabled {\n        cursor: not-allowed; }\n\n      :host [contenteditable='true'] {\n        outline: 0; }\n\n      .tag-wrapper {\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex; }\n\n      .tag__text {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap; }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'model': [{ type: Input },],\n'removable': [{ type: Input },],\n'editable': [{ type: Input },],\n'template': [{ type: Input },],\n'displayBy': [{ type: Input },],\n'identifyBy': [{ type: Input },],\n'index': [{ type: Input },],\n'hasRipple': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelect': [{ type: Output },],\n'onRemove': [{ type: Output },],\n'onBlur': [{ type: Output },],\n'onKeyDown': [{ type: Output },],\n'onTagEdited': [{ type: Output },],\n'moving': [{ type: HostBinding, args: ['class.moving', ] },],\n'ripple': [{ type: ViewChild, args: [TagRipple, ] },],\n'keydown': [{ type: HostListener, args: ['keydown', ['$event'], ] },],\n};\n}\n\nfunction TagComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTagComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTagComponent.ctorParameters;\n/** @type {?} */\nTagComponent.propDecorators;\n/**\n * \\@name model {TagModel}\n * @type {?}\n */\nTagComponent.prototype.model;\n/**\n * \\@name removable {boolean}\n * @type {?}\n */\nTagComponent.prototype.removable;\n/**\n * \\@name editable {boolean}\n * @type {?}\n */\nTagComponent.prototype.editable;\n/**\n * \\@name template {TemplateRef<any>}\n * @type {?}\n */\nTagComponent.prototype.template;\n/**\n * \\@name displayBy {string}\n * @type {?}\n */\nTagComponent.prototype.displayBy;\n/**\n * \\@name identifyBy {string}\n * @type {?}\n */\nTagComponent.prototype.identifyBy;\n/**\n * \\@name index {number}\n * @type {?}\n */\nTagComponent.prototype.index;\n/**\n * \\@name hasRipple\n * @type {?}\n */\nTagComponent.prototype.hasRipple;\n/**\n * \\@name disabled\n * @type {?}\n */\nTagComponent.prototype.disabled;\n/**\n * \\@name onSelect\n * @type {?}\n */\nTagComponent.prototype.onSelect;\n/**\n * \\@name onRemove\n * @type {?}\n */\nTagComponent.prototype.onRemove;\n/**\n * \\@name onBlur\n * @type {?}\n */\nTagComponent.prototype.onBlur;\n/**\n * \\@name onKeyDown\n * @type {?}\n */\nTagComponent.prototype.onKeyDown;\n/**\n * \\@name onTagEdited\n * @type {?}\n */\nTagComponent.prototype.onTagEdited;\n/**\n * \\@name editing\n * @type {?}\n */\nTagComponent.prototype.editing;\n/**\n * \\@name moving\n * @type {?}\n */\nTagComponent.prototype.moving;\n/**\n * \\@name rippleState\n * @type {?}\n */\nTagComponent.prototype.rippleState;\n/**\n * \\@name ripple {TagRipple}\n * @type {?}\n */\nTagComponent.prototype.ripple;\n/** @type {?} */\nTagComponent.prototype.element;\n/** @type {?} */\nTagComponent.prototype.renderer;\n/** @type {?} */\nTagComponent.prototype.cdRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n    animate,\n    trigger,\n    style,\n    transition,\n    keyframes,\n    state,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n/**\n * \\@name animations\n */\nexport const animations = [\n    trigger('animation', [\n        state('in', style({\n            opacity: 1\n        })),\n        state('out', style({\n            opacity: 0\n        })),\n        transition(':enter', [\n            animate(\"{{ enter }}\", keyframes([\n                style({opacity: 0, offset: 0, transform: 'translate(0px, 20px)'}),\n                style({opacity: 0.3, offset: 0.3, transform: 'translate(0px, -10px)'}),\n                style({opacity: 0.5, offset: 0.5, transform: 'translate(0px, 0px)'}),\n                style({opacity: 0.75, offset: 0.75, transform: 'translate(0px, 5px)'}),\n                style({opacity: 1, offset: 1, transform: 'translate(0px, 0px)'})\n            ]))\n        ]),\n        transition(':leave', [\n            animate(\"{{ leave }}\", keyframes([\n                style({opacity: 1, transform: 'translateX(0)', offset: 0}),\n                style({opacity: 1, transform: 'translateX(-15px)', offset: 0.7}),\n                style({opacity: 0, transform: 'translateX(100%)', offset: 1.0})\n            ]))\n        ])\n    ])\n];\n","// angular\n\nimport {\n    Component,\n    forwardRef,\n    HostBinding,\n    Input,\n    Output,\n    EventEmitter,\n    Renderer2,\n    ViewChild,\n    ViewChildren,\n    ContentChildren,\n    ContentChild,\n    OnInit,\n    TemplateRef,\n    QueryList,\n    AfterViewInit,\n    Type\n} from '@angular/core';\n\nimport {\n    AsyncValidatorFn,\n    FormControl,\n    NG_VALUE_ACCESSOR,\n    ValidatorFn\n} from '@angular/forms';\n\n// rx\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/operator/debounceTime';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/operator/first';\n\n// ng2-tag-input\n\nimport { TagInputAccessor, TagModel } from '../../core/accessor';\nimport { listen } from '../../core/helpers/listen';\nimport * as constants from '../../core/constants';\n\nimport { DragProvider, DraggedTag } from '../../core/providers/drag-provider';\nimport { OptionsProvider } from '../../core/providers/options-provider';\n\nimport { TagInputForm } from '../tag-input-form/tag-input-form.component';\nimport { TagInputDropdown } from '../dropdown/tag-input-dropdown.component';\nimport { TagComponent } from '../tag/tag.component';\n\nimport { animations } from './animations';\nimport { TagInputOptions } from '../../defaults';\n\n// angular universal hacks\n/* tslint:disable-next-line */\nconst /** @type {?} */ DragEvent = ( /** @type {?} */((global as any))).DragEvent;\n\nconst /** @type {?} */ CUSTOM_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TagInputComponent),\n    multi: true\n};\n\nconst /** @type {?} */ defaults: Type<TagInputOptions> = forwardRef(() => OptionsProvider.defaults.tagInput);\nexport class TagInputComponent extends TagInputAccessor implements OnInit, AfterViewInit {\n/**\n * \\@name separatorKeys\n * @desc keyboard keys with which a user can separate items\n */\npublic separatorKeys: string[] = new defaults().separatorKeys;\n/**\n * \\@name separatorKeyCodes\n * @desc keyboard key codes with which a user can separate items\n */\npublic separatorKeyCodes: number[] = new defaults().separatorKeyCodes;\n/**\n * \\@name placeholder\n * @desc the placeholder of the input text\n */\npublic placeholder: string = new defaults().placeholder;\n/**\n * \\@name secondaryPlaceholder\n * @desc placeholder to appear when the input is empty\n */\npublic secondaryPlaceholder: string = new defaults().secondaryPlaceholder;\n/**\n * \\@name maxItems\n * @desc maximum number of items that can be added\n */\npublic maxItems: number = new defaults().maxItems;\n/**\n * \\@name validators\n * @desc array of Validators that are used to validate the tag before it gets appended to the list\n */\npublic validators: ValidatorFn[] = new defaults().validators;\n/**\n * \\@name asyncValidators\n * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n */\npublic asyncValidators: AsyncValidatorFn[] = new defaults().asyncValidators;\n/**\n * - if set to true, it will only possible to add items from the autocomplete\n * \\@name onlyFromAutocomplete\n */\npublic onlyFromAutocomplete = new defaults().onlyFromAutocomplete;\n/**\n * \\@name errorMessages\n */\npublic errorMessages: { [key: string]: string } = new defaults().errorMessages;\n/**\n * \\@name theme\n */\npublic theme: string = new defaults().theme;\n/**\n * \\@name onTextChangeDebounce\n */\npublic onTextChangeDebounce = new defaults().onTextChangeDebounce;\n/**\n * - custom id assigned to the input\n * \\@name id\n */\npublic inputId: string = new defaults().inputId;\n/**\n * - custom class assigned to the input\n */\npublic inputClass: string = new defaults().inputClass;\n/**\n * - option to clear text input when the form is blurred\n * \\@name clearOnBlur\n */\npublic clearOnBlur: boolean = new defaults().clearOnBlur;\n/**\n * - hideForm\n * \\@name clearOnBlur\n */\npublic hideForm: boolean = new defaults().hideForm;\n/**\n * \\@name addOnBlur\n */\npublic addOnBlur: boolean = new defaults().addOnBlur;\n/**\n * \\@name addOnPaste\n */\npublic addOnPaste: boolean = new defaults().addOnPaste;\n/**\n * - pattern used with the native method split() to separate patterns in the string pasted\n * \\@name pasteSplitPattern\n */\npublic pasteSplitPattern = new defaults().pasteSplitPattern;\n/**\n * \\@name blinkIfDupe\n */\npublic blinkIfDupe = new defaults().blinkIfDupe;\n/**\n * \\@name removable\n */\npublic removable = new defaults().removable;\n/**\n * \\@name editable\n */\npublic editable: boolean = new defaults().editable;\n/**\n * \\@name allowDupes\n */\npublic allowDupes = new defaults().allowDupes;\n/**\n * \\@description if set to true, the newly added tags will be added as strings, and not objects\n * \\@name modelAsStrings\n */\npublic modelAsStrings = new defaults().modelAsStrings;\n/**\n * \\@name trimTags\n */\npublic trimTags = new defaults().trimTags;\n/**\n * \\@name inputText\n * @return {?}\n */\npublic get inputText(): string {\n        return this.inputTextValue;\n    }\n/**\n * \\@name ripple\n */\npublic ripple: boolean = new defaults().ripple;\n/**\n * \\@name tabindex\n * @desc pass through the specified tabindex to the input\n */\npublic tabindex: string = new defaults().tabIndex;\n/**\n * \\@name disable\n */\npublic disable: boolean = new defaults().disable;\n/**\n * \\@name dragZone\n */\npublic dragZone: string = new defaults().dragZone;\n/**\n * \\@name onRemoving\n */\npublic onRemoving = new defaults().onRemoving;\n/**\n * \\@name onAdding\n */\npublic onAdding = new defaults().onAdding;\n/**\n * \\@name animationDuration\n */\npublic animationDuration = new defaults().animationDuration;\n/**\n * \\@name onAdd\n * @desc event emitted when adding a new item\n */\npublic onAdd = new EventEmitter<TagModel>();\n/**\n * \\@name onRemove\n * @desc event emitted when removing an existing item\n */\npublic onRemove = new EventEmitter<TagModel>();\n/**\n * \\@name onSelect\n * @desc event emitted when selecting an item\n */\npublic onSelect = new EventEmitter<TagModel>();\n/**\n * \\@name onFocus\n * @desc event emitted when the input is focused\n */\npublic onFocus = new EventEmitter<string>();\n/**\n * \\@name onFocus\n * @desc event emitted when the input is blurred\n */\npublic onBlur = new EventEmitter<string>();\n/**\n * \\@name onTextChange\n * @desc event emitted when the input value changes\n */\npublic onTextChange = new EventEmitter<TagModel>();\n/**\n * - output triggered when text is pasted in the form\n * \\@name onPaste\n */\npublic onPaste = new EventEmitter<string>();\n/**\n * - output triggered when tag entered is not valid\n * \\@name onValidationError\n */\npublic onValidationError = new EventEmitter<TagModel>();\n/**\n * - output triggered when tag is edited\n * \\@name onTagEdited\n */\npublic onTagEdited = new EventEmitter<TagModel>();\n/**\n * \\@name dropdown\n */\npublic dropdown: TagInputDropdown;\n/**\n * \\@name template\n * @desc reference to the template if provided by the user\n */\npublic templates: QueryList<TemplateRef<any>>;\n/**\n * \\@name inputForm\n */\npublic inputForm: TagInputForm;\n/**\n * \\@name selectedTag\n * @desc reference to the current selected tag\n */\npublic selectedTag: TagModel | undefined;\n/**\n * \\@name isLoading\n */\npublic isLoading = false;\n/**\n * \\@name inputText\n * @param {?} text\n * @return {?}\n */\npublic set inputText(text: string) {\n        this.inputTextValue = text;\n        this.inputTextChange.emit(text);\n    }\n/**\n * \\@name tags\n * @desc list of Element items\n */\npublic tags: QueryList<TagComponent>;\n/**\n * \\@name listeners\n * @desc array of events that get fired using \\@fireEvents\n */\nprivate listeners = {\n        [constants.KEYDOWN]: <{ (fun): any }[]>[],\n        [constants.KEYUP]: <{ (fun): any }[]>[]\n    };\n/**\n * \\@description emitter for the 2-way data binding inputText value\n * \\@name inputTextChange\n */\npublic inputTextChange: EventEmitter<string> = new EventEmitter();\n/**\n * \\@description private variable to bind get/set\n * \\@name inputTextValue\n */\npublic inputTextValue = '';\n/**\n * @desc removes the tab index if it is set - it will be passed through to the input\n * \\@name tabindexAttr\n * @return {?}\n */\npublic get tabindexAttr(): string {\n        return this.tabindex !== '' ? '-1' : '';\n    }\n/**\n * \\@name animationMetadata\n */\npublic animationMetadata: { value: string, params: object };\n/**\n * @param {?} renderer\n * @param {?} dragProvider\n */\nconstructor(private readonly renderer: Renderer2,\npublic readonly dragProvider: DragProvider) {\n        super();\n    }\n/**\n * \\@name ngAfterViewInit\n * @return {?}\n */\npublic ngAfterViewInit(): void {\n        // set up listeners\n\n        this.setUpKeypressListeners();\n        this.setupSeparatorKeysListener();\n        this.setUpInputKeydownListeners();\n\n        if (this.onTextChange.observers.length) {\n            this.setUpTextChangeSubscriber();\n        }\n\n        // if clear on blur is set to true, subscribe to the event and clear the text's form\n        if (this.clearOnBlur || this.addOnBlur) {\n            this.setUpOnBlurSubscriber();\n        }\n\n        // if addOnPaste is set to true, register the handler and add items\n        if (this.addOnPaste) {\n            this.setUpOnPasteListener();\n        }\n\n        // if hideForm is set to true, remove the input\n        if (this.hideForm) {\n            this.inputForm.destroy();\n        }\n    }\n/**\n * \\@name ngOnInit\n * @return {?}\n */\npublic ngOnInit(): void {\n        // if the number of items specified in the model is > of the value of maxItems\n        // degrade gracefully and let the max number of items to be the number of items in the model\n        // though, warn the user.\n        const /** @type {?} */ hasReachedMaxItems = this.maxItems !== undefined &&\n            this.items &&\n            this.items.length > this.maxItems;\n\n        if (hasReachedMaxItems) {\n            this.maxItems = this.items.length;\n            console.warn(constants.MAX_ITEMS_WARNING);\n        }\n\n\t    // Setting editable to false to fix problem with tags in IE still being editable when\n\t    // onlyFromAutocomplete is true\n\t\tthis.editable = this.onlyFromAutocomplete ? false : this.editable;\n\n        this.setAnimationMetadata();\n    }\n/**\n * \\@name onRemoveRequested\n * @param {?} tag\n * @param {?} index\n * @return {?}\n */\npublic onRemoveRequested(tag: TagModel, index: number): void {\n        const /** @type {?} */ subscribeFn = (model: TagModel) => this.removeItem(model, index);\n\n        this.onRemoving ?\n            this.onRemoving(tag)\n                .first()\n                .subscribe(subscribeFn) : subscribeFn(tag);\n    }\n/**\n * \\@name onAddingRequested\n * @param {?} fromAutocomplete {boolean}\n * @param {?} tag {TagModel}\n * @param {?=} index\n * @return {?}\n */\npublic onAddingRequested(fromAutocomplete: boolean, tag: TagModel, index?: number): void {\n        if (!tag) {\n            return;\n        }\n\n        const /** @type {?} */ subscribeFn = (model: TagModel) => {\n            return this.addItem(fromAutocomplete, model, index);\n        }\n\n        this.onAdding ?\n            this.onAdding(tag)\n                .first()\n                .subscribe(subscribeFn) : subscribeFn(tag);\n    }\n/**\n * \\@name appendTag\n * @param tag {TagModel}\n */\npublic appendTag = (tag: TagModel, index = this.items.length): void => {\n        const items = this.items;\n        const model = this.modelAsStrings ? tag[this.identifyBy] : tag;\n\n        this.items = [\n            ...items.slice(0, index),\n            model,\n            ...items.slice(index, items.length)\n        ];\n    }\n/**\n * \\@name createTag\n * @param model\n */\npublic createTag = (model: TagModel): TagModel => {\n        const trim = (val: TagModel, key: string): TagModel => {\n            return typeof val === 'string' ? val.trim() : val[key];\n        };\n\n        return {\n            ...typeof model !== 'string' ? model : {},\n            [this.displayBy]: this.trimTags ? trim(model, this.displayBy) : model,\n            [this.identifyBy]: this.trimTags ? trim(model, this.identifyBy) : model\n        };\n    }\n/**\n * \\@name selectItem\n * @desc selects item passed as parameter as the selected tag\n * @param {?} item\n * @param {?=} emit\n * @return {?}\n */\npublic selectItem(item: TagModel | undefined, emit = true): void {\n        const /** @type {?} */ isReadonly = item && typeof item !== 'string' && item.readonly;\n\n        if (isReadonly || this.selectedTag === item) {\n            return;\n        }\n\n        this.selectedTag = item;\n\n        if (emit) {\n            this.onSelect.emit(item);\n        }\n    }\n/**\n * \\@name fireEvents\n * @desc goes through the list of the events for a given eventName, and fires each of them\n * @param {?} eventName\n * @param {?=} $event\n * @return {?}\n */\npublic fireEvents(eventName: string, $event?): void {\n        this.listeners[eventName].forEach(listener => listener.call(this, $event));\n    }\n/**\n * \\@name handleKeydown\n * @desc handles action when the user hits a keyboard key\n * @param {?} data\n * @return {?}\n */\npublic handleKeydown(data: any): void {\n        const /** @type {?} */ event = data.event;\n        const /** @type {?} */ key = event.keyCode || event.which;\n\n        switch (constants.KEY_PRESS_ACTIONS[key]) {\n            case constants.ACTIONS_KEYS.DELETE:\n                if (this.selectedTag && this.removable) {\n                    const /** @type {?} */ index = this.items.indexOf(this.selectedTag);\n                    this.onRemoveRequested(this.selectedTag, index);\n                }\n                break;\n            case constants.ACTIONS_KEYS.SWITCH_PREV:\n                this.moveToTag(data.model, constants.PREV);\n                break;\n            case constants.ACTIONS_KEYS.SWITCH_NEXT:\n                this.moveToTag(data.model, constants.NEXT);\n                break;\n            case constants.ACTIONS_KEYS.TAB:\n                this.moveToTag(data.model, constants.NEXT);\n                break;\n            default:\n                return;\n        }\n\n        // prevent default behaviour\n        event.preventDefault();\n    }\n/**\n * \\@name setInputValue\n * @param {?} value\n * @return {?}\n */\npublic setInputValue(value: string): void {\n        const /** @type {?} */ control = this.getControl();\n\n        // update form value with the transformed item\n        control.setValue(value);\n    }\n/**\n * \\@name getControl\n * @return {?}\n */\nprivate getControl(): FormControl {\n        return /** @type {?} */(( <FormControl>this.inputForm.value));\n    }\n/**\n * \\@name focus\n * @param {?=} applyFocus\n * @param {?=} displayAutocomplete\n * @return {?}\n */\npublic focus(applyFocus = false, displayAutocomplete = false): void {\n        if (this.dragProvider.getState('dragging')) {\n            return;\n        }\n\n        this.selectItem(undefined, false);\n\n        if (applyFocus) {\n            this.inputForm.focus();\n            this.onFocus.emit(this.formValue);\n        }\n    }\n/**\n * \\@name blur\n * @return {?}\n */\npublic blur(): void {\n        this.onTouched();\n\n        this.onBlur.emit(this.formValue);\n    }\n/**\n * \\@name hasErrors\n * @return {?}\n */\npublic hasErrors(): boolean {\n        return this.inputForm && this.inputForm.hasErrors();\n    }\n/**\n * \\@name isInputFocused\n * @return {?}\n */\npublic isInputFocused(): boolean {\n        return this.inputForm && this.inputForm.isInputFocused();\n    }\n/**\n * - this is the one way I found to tell if the template has been passed and it is not\n * the template for the menu item\n * \\@name hasCustomTemplate\n * @return {?}\n */\npublic hasCustomTemplate(): boolean {\n        const /** @type {?} */ template = this.templates ? this.templates.first : undefined;\n        const /** @type {?} */ menuTemplate = this.dropdown && this.dropdown.templates ?\n            this.dropdown.templates.first : undefined;\n\n        return Boolean(template && template !== menuTemplate);\n    }\n/**\n * \\@name maxItemsReached\n * @return {?}\n */\npublic get maxItemsReached(): boolean {\n        return this.maxItems !== undefined &&\n            this.items.length >= this.maxItems;\n    }\n/**\n * \\@name formValue\n * @return {?}\n */\npublic get formValue(): string {\n        const /** @type {?} */ form = this.inputForm.value;\n\n        return form ? form.value : '';\n    }\n/**\n * 3\n * \\@name onDragStarted\n * @param {?} event\n * @param {?} tag\n * @param {?} index\n * @return {?}\n */\npublic onDragStarted(event: DragEvent, tag: TagModel, index: number): void {\n        event.stopPropagation();\n\n        const /** @type {?} */ item = /** @type {?} */(( { zone: this.dragZone, tag, index } as DraggedTag));\n\n        this.dragProvider.setSender(this);\n        this.dragProvider.setDraggedItem(event, item);\n        this.dragProvider.setState({dragging: true, index});\n    }\n/**\n * \\@name onDragOver\n * @param {?} event\n * @param {?=} index\n * @return {?}\n */\npublic onDragOver(event: DragEvent, index?: number): void {\n        this.dragProvider.setState({dropping: true});\n        this.dragProvider.setReceiver(this);\n\n        event.preventDefault();\n    }\n/**\n * \\@name onTagDropped\n * @param {?} event\n * @param {?} index\n * @return {?}\n */\npublic onTagDropped(event: DragEvent, index: number): void {\n        const /** @type {?} */ item = this.dragProvider.getDraggedItem(event);\n\n        if (item.zone !== this.dragZone) {\n            return;\n        }\n\n        this.dragProvider.onTagDropped(item.tag, item.index, index);\n\n        event.preventDefault();\n        event.stopPropagation();\n    }\n/**\n * \\@name isDropping\n * @return {?}\n */\npublic isDropping(): boolean {\n        const /** @type {?} */ isReceiver = this.dragProvider.receiver === this;\n        const /** @type {?} */ isDropping = this.dragProvider.getState('dropping');\n\n        return Boolean(isReceiver && isDropping);\n    }\n/**\n * \\@name onTagBlurred\n * @param {?} changedElement {TagModel}\n * @param {?} index {number}\n * @return {?}\n */\npublic onTagBlurred(changedElement: TagModel, index: number): void {\n        this.items[index] = changedElement;\n        this.blur();\n    }\n/**\n * \\@name trackBy\n * @param {?} item\n * @return {?}\n */\npublic trackBy(item: TagModel): string {\n        return item[this.identifyBy];\n    }\n/**\n *\n * @param {?} tag\n * @param {?=} fromAutocomplete\n * @return {?}\n */\nprivate isTagValid(tag: TagModel, fromAutocomplete = false): boolean {\n        const /** @type {?} */ selectedItem = this.dropdown ? this.dropdown.selectedItem : undefined;\n\n        if (selectedItem && !fromAutocomplete) {\n            return false;\n        }\n\n        const /** @type {?} */ dupe = this.findDupe(tag, fromAutocomplete);\n\n        // if so, give a visual cue and return false\n        if (!this.allowDupes && dupe && this.blinkIfDupe) {\n            const /** @type {?} */ model = this.tags.find(tag => {\n                return this.getItemValue(tag.model) === this.getItemValue(dupe);\n            });\n\n            if (model) {\n                model.blink();\n            }\n        }\n\n        const /** @type {?} */ isFromAutocomplete = fromAutocomplete && this.onlyFromAutocomplete;\n\n        const /** @type {?} */ assertions = [\n            // 1. there must be no dupe OR dupes are allowed\n            !dupe || this.allowDupes === true,\n\n            // 2. check max items has not been reached\n            this.maxItemsReached === false,\n\n            // 3. check item comes from autocomplete or onlyFromAutocomplete is false\n            ((isFromAutocomplete) || this.onlyFromAutocomplete === false)\n        ];\n\n        return assertions.filter(item => item).length === assertions.length;\n    }\n/**\n * \\@name moveToTag\n * @param {?} item\n * @param {?} direction\n * @return {?}\n */\nprivate moveToTag(item: TagModel, direction: string): void {\n        const /** @type {?} */ isLast = this.tags.last.model === item;\n        const /** @type {?} */ isFirst = this.tags.first.model === item;\n        const /** @type {?} */ stopSwitch = (direction === constants.NEXT && isLast) ||\n            (direction === constants.PREV && isFirst);\n\n        if (stopSwitch) {\n            this.focus(true);\n            return;\n        }\n\n        const /** @type {?} */ offset = direction === constants.NEXT ? 1 : -1;\n        const /** @type {?} */ index = this.getTagIndex(item) + offset;\n        const /** @type {?} */ tag = this.getTagAtIndex(index);\n\n        return tag.select.call(tag);\n    }\n/**\n * \\@name getTagIndex\n * @param {?} item\n * @return {?}\n */\nprivate getTagIndex(item: TagModel): number {\n        const /** @type {?} */ tags = this.tags.toArray();\n\n        return tags.findIndex(tag => tag.model === item);\n    }\n/**\n * \\@name getTagAtIndex\n * @param {?} index\n * @return {?}\n */\nprivate getTagAtIndex(index: number) {\n        const /** @type {?} */ tags = this.tags.toArray();\n\n        return tags[index];\n    }\n/**\n * \\@name removeItem\n * @desc removes an item from the array of the model\n * @param {?} tag {TagModel}\n * @param {?} index {number}\n * @return {?}\n */\nprivate removeItem(tag: TagModel, index: number): void {\n        this.items = this.getItemsWithout(index);\n\n        // if the removed tag was selected, set it as undefined\n        if (this.selectedTag === tag) {\n            this.selectItem(undefined, false);\n        }\n\n        // focus input\n        this.focus(true, false);\n\n        // emit remove event\n        this.onRemove.emit(tag);\n    }\n/**\n * \\@name addItem\n * @desc adds the current text model to the items array\n * @param {?=} fromAutocomplete\n * @param {?=} item\n * @param {?=} index\n * @return {?}\n */\nprivate addItem(fromAutocomplete = false, item: TagModel, index?: number): void {\n        const /** @type {?} */ model = this.getItemDisplay(item);\n/**\n * \\@name reset\n */\nconst reset = (): void => {\n            // reset control and focus input\n            this.setInputValue('');\n\n            // focus input\n            this.focus(true, false);\n        };\n/**\n * \\@name validationFilter\n * @param tag\n */\nconst validationFilter = (tag: TagModel): boolean => {\n            const isValid = this.isTagValid(tag, fromAutocomplete) && this.inputForm.form.valid;\n\n            if (!isValid) {\n                this.onValidationError.emit(tag);\n            }\n\n            return isValid;\n        };\n/**\n * \\@name subscribeFn\n * @param tag\n */\nconst subscribeFn = (tag: TagModel): void => {\n            this.appendTag(tag, index);\n\n            // emit event\n            this.onAdd.emit(tag);\n\n            if (!this.dropdown) {\n                return;\n            }\n\n            this.dropdown.hide();\n            this.dropdown.showDropdownIfEmpty ? this.dropdown.show() : undefined;\n        };\n\n        Observable\n            .of(model)\n            .first()\n            .filter(() => model.trim() !== '')\n            .map(() => item)\n            .map(this.createTag)\n            .filter(validationFilter)\n            .subscribe(subscribeFn, undefined, reset);\n    }\n/**\n * \\@name setupSeparatorKeysListener\n * @return {?}\n */\nprivate setupSeparatorKeysListener(): void {\n        const /** @type {?} */ useSeparatorKeys = this.separatorKeyCodes.length > 0 || this.separatorKeys.length > 0;\n        const /** @type {?} */ listener = ($event) => {\n            const /** @type {?} */ hasKeyCode = this.separatorKeyCodes.indexOf($event.keyCode) >= 0;\n            const /** @type {?} */ hasKey = this.separatorKeys.indexOf($event.key) >= 0;\n\n            if (hasKeyCode || hasKey) {\n                $event.preventDefault();\n                this.onAddingRequested(false, this.formValue);\n            }\n        };\n\n        listen.call(this, constants.KEYDOWN, listener, useSeparatorKeys);\n    }\n/**\n * \\@name setUpKeypressListeners\n * @return {?}\n */\nprivate setUpKeypressListeners(): void {\n        const /** @type {?} */ listener = ($event) => {\n            const /** @type {?} */ isCorrectKey = $event.keyCode === 37 || $event.keyCode === 8;\n\n            if (isCorrectKey &&\n                !this.formValue &&\n                this.items.length) {\n                this.tags.last.select.call(this.tags.last);\n            }\n        };\n\n        // setting up the keypress listeners\n        listen.call(this, constants.KEYDOWN, listener);\n    }\n/**\n * \\@name setUpKeydownListeners\n * @return {?}\n */\nprivate setUpInputKeydownListeners(): void {\n        this.inputForm.onKeydown.subscribe(event => {\n            this.fireEvents('keydown', event);\n\n            if (event.key === 'Backspace' && this.formValue === '') {\n                event.preventDefault();\n            }\n        });\n    }\n/**\n * \\@name setUpOnPasteListener\n * @return {?}\n */\nprivate setUpOnPasteListener(): void {\n        const /** @type {?} */ input = this.inputForm.input.nativeElement;\n\n        // attach listener to input\n        this.renderer.listen(input, 'paste', this.onPasteCallback);\n    }\n/**\n * \\@name setUpTextChangeSubscriber\n * @return {?}\n */\nprivate setUpTextChangeSubscriber(): void {\n        this.inputForm.form\n            .valueChanges\n            .debounceTime(this.onTextChangeDebounce)\n            .map(() => this.formValue)\n            .subscribe((value: string) => this.onTextChange.emit(value));\n    }\n/**\n * \\@name setUpOnBlurSubscriber\n * @return {?}\n */\nprivate setUpOnBlurSubscriber(): void {\n        const /** @type {?} */ filterFn = (): boolean => {\n            return !(this.dropdown && this.dropdown.isVisible) && !!this.formValue;\n        };\n\n        this.inputForm\n            .onBlur\n            .filter(filterFn)\n            .subscribe(() => {\n                if (this.addOnBlur) {\n                    this.onAddingRequested(false, this.formValue);\n                }\n\n                this.setInputValue('');\n            });\n    }\n/**\n * \\@name findDupe\n * @param {?} tag\n * @param {?} isFromAutocomplete\n * @return {?}\n */\nprivate findDupe(tag: TagModel, isFromAutocomplete: boolean): TagModel | undefined {\n        const /** @type {?} */ identifyBy = isFromAutocomplete ? this.dropdown.identifyBy : this.identifyBy;\n        const /** @type {?} */ id = tag[identifyBy];\n\n        return this.items.find(item => this.getItemValue(item) === id);\n    }\n/**\n * \\@name onPasteCallback\n * @param data\n */\nprivate onPasteCallback = (data: ClipboardEvent): void => {\n        const text = data.clipboardData.getData('text/plain');\n\n        text.split(this.pasteSplitPattern)\n            .map(item => this.createTag(item))\n            .forEach(item => this.onAddingRequested(false, item));\n\n        this.onPaste.emit(text);\n\n        setTimeout(() => this.setInputValue(''), 0);\n    }\n/**\n * \\@name setAnimationMetadata\n * @return {?}\n */\nprivate setAnimationMetadata(): void {\n        this.animationMetadata = {\n            value: 'in',\n            params: {...this.animationDuration}\n        };\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'tag-input',\n    providers: [CUSTOM_ACCESSOR],\n    styles: [`\n      .dark tag:focus {\n        -webkit-box-shadow: 0 0 0 1px #323232;\n                box-shadow: 0 0 0 1px #323232; }\n\n      .ng2-tag-input.bootstrap3-info {\n        background-color: #fff;\n        display: inline-block;\n        color: #555;\n        vertical-align: middle;\n        max-width: 100%;\n        height: 42px;\n        line-height: 44px; }\n\n      .ng2-tag-input.bootstrap3-info input {\n        border: none;\n        -webkit-box-shadow: none;\n                box-shadow: none;\n        outline: none;\n        background-color: transparent;\n        padding: 0 6px;\n        margin: 0;\n        width: auto;\n        max-width: inherit; }\n\n      .ng2-tag-input.bootstrap3-info .form-control input::-moz-placeholder {\n        color: #777;\n        opacity: 1; }\n\n      .ng2-tag-input.bootstrap3-info .form-control input:-ms-input-placeholder {\n        color: #777; }\n\n      .ng2-tag-input.bootstrap3-info .form-control input::-webkit-input-placeholder {\n        color: #777; }\n\n      .ng2-tag-input.bootstrap3-info input:focus {\n        border: none;\n        -webkit-box-shadow: none;\n                box-shadow: none; }\n\n      .bootstrap3-info.ng2-tag-input.ng2-tag-input--focused {\n        -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.4);\n                box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.4);\n        border: 1px solid #ccc; }\n\n      .bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid {\n        -webkit-box-shadow: inset 0 1px 1px #d9534f;\n                box-shadow: inset 0 1px 1px #d9534f; }\n\n      .ng2-tag-input {\n        display: block;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        -ms-flex-wrap: wrap;\n            flex-wrap: wrap;\n        position: relative;\n        -webkit-transition: all 0.25s;\n        transition: all 0.25s;\n        padding: 0.25rem 0;\n        min-height: 32px;\n        cursor: text;\n        border-bottom: 2px solid #efefef; }\n        .ng2-tag-input:focus {\n          outline: 0; }\n        .ng2-tag-input.ng2-tag-input--dropping {\n          opacity: 0.7; }\n        .ng2-tag-input.ng2-tag-input--focused {\n          border-bottom: 2px solid #2196F3; }\n        .ng2-tag-input.ng2-tag-input--invalid {\n          border-bottom: 2px solid #f44336; }\n        .ng2-tag-input.ng2-tag-input--loading {\n          border: none; }\n        .ng2-tag-input.ng2-tag-input--disabled {\n          opacity: 0.5;\n          cursor: not-allowed; }\n        .ng2-tag-input form {\n          margin: 0.1em 0; }\n        .ng2-tag-input .ng2-tags-container {\n          -ms-flex-wrap: wrap;\n              flex-wrap: wrap;\n          display: -webkit-box;\n          display: -ms-flexbox;\n          display: flex; }\n\n      .minimal.ng2-tag-input {\n        display: block;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        -ms-flex-wrap: wrap;\n            flex-wrap: wrap;\n        position: relative;\n        cursor: text;\n        border-bottom: 1px solid transparent; }\n        .minimal.ng2-tag-input:focus {\n          outline: 0; }\n        .minimal.ng2-tag-input.ng2-tag-input--dropping {\n          opacity: 0.7; }\n        .minimal.ng2-tag-input.ng2-tag-input--loading {\n          border: none; }\n        .minimal.ng2-tag-input.ng2-tag-input--disabled {\n          opacity: 0.5;\n          cursor: not-allowed; }\n        .minimal.ng2-tag-input .ng2-tags-container {\n          -ms-flex-wrap: wrap;\n              flex-wrap: wrap;\n          display: -webkit-box;\n          display: -ms-flexbox;\n          display: flex; }\n\n      .dark.ng2-tag-input {\n        display: block;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        -ms-flex-wrap: wrap;\n            flex-wrap: wrap;\n        position: relative;\n        cursor: text;\n        border-bottom: 2px solid #444; }\n        .dark.ng2-tag-input:focus {\n          outline: 0; }\n        .dark.ng2-tag-input.ng2-tag-input--dropping {\n          opacity: 0.7; }\n        .dark.ng2-tag-input.ng2-tag-input--loading {\n          border: none; }\n        .dark.ng2-tag-input.ng2-tag-input--disabled {\n          opacity: 0.5;\n          cursor: not-allowed; }\n        .dark.ng2-tag-input .ng2-tags-container {\n          -ms-flex-wrap: wrap;\n              flex-wrap: wrap;\n          display: -webkit-box;\n          display: -ms-flexbox;\n          display: flex; }\n\n      .bootstrap.ng2-tag-input {\n        display: block;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        -ms-flex-wrap: wrap;\n            flex-wrap: wrap;\n        position: relative;\n        cursor: text;\n        border-bottom: 2px solid #efefef; }\n        .bootstrap.ng2-tag-input:focus {\n          outline: 0; }\n        .bootstrap.ng2-tag-input.ng2-tag-input--dropping {\n          opacity: 0.7; }\n        .bootstrap.ng2-tag-input.ng2-tag-input--focused {\n          border-bottom: 2px solid #0275d8; }\n        .bootstrap.ng2-tag-input.ng2-tag-input--invalid {\n          border-bottom: 2px solid #d9534f; }\n        .bootstrap.ng2-tag-input.ng2-tag-input--loading {\n          border: none; }\n        .bootstrap.ng2-tag-input.ng2-tag-input--disabled {\n          opacity: 0.5;\n          cursor: not-allowed; }\n        .bootstrap.ng2-tag-input .ng2-tags-container {\n          -ms-flex-wrap: wrap;\n              flex-wrap: wrap;\n          display: -webkit-box;\n          display: -ms-flexbox;\n          display: flex; }\n\n      .bootstrap3-info.ng2-tag-input {\n        display: block;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        -ms-flex-wrap: wrap;\n            flex-wrap: wrap;\n        position: relative;\n        padding: 4px;\n        cursor: text;\n        -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n                box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n        border-radius: 4px; }\n        .bootstrap3-info.ng2-tag-input:focus {\n          outline: 0; }\n        .bootstrap3-info.ng2-tag-input.ng2-tag-input--dropping {\n          opacity: 0.7; }\n        .bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid {\n          border-bottom: 1px solid #d9534f; }\n        .bootstrap3-info.ng2-tag-input.ng2-tag-input--loading {\n          border: none; }\n        .bootstrap3-info.ng2-tag-input.ng2-tag-input--disabled {\n          opacity: 0.5;\n          cursor: not-allowed; }\n        .bootstrap3-info.ng2-tag-input form {\n          margin: 0.1em 0; }\n        .bootstrap3-info.ng2-tag-input .ng2-tags-container {\n          -ms-flex-wrap: wrap;\n              flex-wrap: wrap;\n          display: -webkit-box;\n          display: -ms-flexbox;\n          display: flex; }\n\n      .error-message {\n        font-size: 0.8em;\n        color: #f44336;\n        margin: 0.5em 0 0 0; }\n\n      .bootstrap .error-message {\n        color: #d9534f; }\n\n      .progress-bar, .progress-bar:before {\n        height: 2px;\n        width: 100%;\n        margin: 0; }\n\n      .progress-bar {\n        background-color: #2196F3;\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        position: absolute;\n        bottom: 0; }\n\n      .progress-bar:before {\n        background-color: #82c4f8;\n        content: '';\n        -webkit-animation: running-progress 2s cubic-bezier(0.4, 0, 0.2, 1) infinite;\n        animation: running-progress 2s cubic-bezier(0.4, 0, 0.2, 1) infinite; }\n\n      @-webkit-keyframes running-progress {\n        0% {\n          margin-left: 0;\n          margin-right: 100%; }\n        50% {\n          margin-left: 25%;\n          margin-right: 0; }\n        100% {\n          margin-left: 100%;\n          margin-right: 0; } }\n\n      @keyframes running-progress {\n        0% {\n          margin-left: 0;\n          margin-right: 100%; }\n        50% {\n          margin-left: 25%;\n          margin-right: 0; }\n        100% {\n          margin-left: 100%;\n          margin-right: 0; } }\n\n      tag {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        -ms-flex-wrap: wrap;\n            flex-wrap: wrap;\n        font-family: \"Roboto\", \"Helvetica Neue\", sans-serif;\n        font-weight: 400;\n        font-size: 1em;\n        letter-spacing: 0.05rem;\n        color: #444;\n        border-radius: 16px;\n        -webkit-transition: all 0.3s;\n        transition: all 0.3s;\n        margin: 0.1rem 0.3rem 0.1rem 0;\n        padding: 0.08rem 0.45rem;\n        height: 32px;\n        line-height: 34px;\n        background: #efefef;\n        -webkit-user-select: none;\n           -moz-user-select: none;\n            -ms-user-select: none;\n                user-select: none;\n        overflow: hidden;\n        outline: 0;\n        cursor: pointer;\n        position: relative; }\n        tag:not(.readonly):not(.tag--editing):focus {\n          background: #2196F3;\n          color: #fff; }\n        tag:not(.readonly):not(.tag--editing):active {\n          background: #0d8aee;\n          color: #fff; }\n        tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover {\n          background: #e2e2e2;\n          color: initial; }\n        tag.readonly {\n          cursor: default; }\n        tag.readonly:focus, tag:focus {\n          outline: 0; }\n        tag.tag--editing {\n          background-color: #fff;\n          border: 1px solid #ccc;\n          cursor: text; }\n\n      .minimal tag {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        -ms-flex-wrap: wrap;\n            flex-wrap: wrap;\n        border-radius: 0;\n        background: #f9f9f9;\n        -webkit-user-select: none;\n           -moz-user-select: none;\n            -ms-user-select: none;\n                user-select: none;\n        overflow: hidden;\n        outline: 0;\n        cursor: pointer;\n        position: relative; }\n        .minimal tag:not(.readonly):not(.tag--editing):focus {\n          background: #d0d0d0;\n          color: initial; }\n        .minimal tag:not(.readonly):not(.tag--editing):active {\n          background: #d0d0d0;\n          color: initial; }\n        .minimal tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover {\n          background: #ececec; }\n        .minimal tag.readonly {\n          cursor: default; }\n        .minimal tag.readonly:focus, .minimal tag:focus {\n          outline: 0; }\n        .minimal tag.tag--editing {\n          cursor: text; }\n\n      .dark tag {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        -ms-flex-wrap: wrap;\n            flex-wrap: wrap;\n        color: #f9f9f9;\n        border-radius: 3px;\n        background: #444;\n        -webkit-user-select: none;\n           -moz-user-select: none;\n            -ms-user-select: none;\n                user-select: none;\n        overflow: hidden;\n        outline: 0;\n        cursor: pointer;\n        position: relative; }\n        .dark tag:not(.readonly):not(.tag--editing):focus {\n          background: #efefef;\n          color: #444; }\n        .dark tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover {\n          background: #2b2b2b;\n          color: #f9f9f9; }\n        .dark tag.readonly {\n          cursor: default; }\n        .dark tag.readonly:focus, .dark tag:focus {\n          outline: 0; }\n        .dark tag.tag--editing {\n          cursor: text; }\n\n      .bootstrap tag {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        -ms-flex-wrap: wrap;\n            flex-wrap: wrap;\n        color: #f9f9f9;\n        border-radius: 0.25rem;\n        background: #0275d8;\n        -webkit-user-select: none;\n           -moz-user-select: none;\n            -ms-user-select: none;\n                user-select: none;\n        overflow: hidden;\n        outline: 0;\n        cursor: pointer;\n        position: relative; }\n        .bootstrap tag:not(.readonly):not(.tag--editing):focus {\n          background: #025aa5; }\n        .bootstrap tag:not(.readonly):not(.tag--editing):active {\n          background: #025aa5; }\n        .bootstrap tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover {\n          background: #0267bf;\n          color: #f9f9f9; }\n        .bootstrap tag.readonly {\n          cursor: default; }\n        .bootstrap tag.readonly:focus, .bootstrap tag:focus {\n          outline: 0; }\n        .bootstrap tag.tag--editing {\n          cursor: text; }\n\n      .bootstrap3-info tag {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        -ms-flex-wrap: wrap;\n            flex-wrap: wrap;\n        font-family: inherit;\n        font-weight: 400;\n        font-size: 95%;\n        color: #fff;\n        border-radius: 0.25em;\n        background: #5bc0de;\n        -webkit-user-select: none;\n           -moz-user-select: none;\n            -ms-user-select: none;\n                user-select: none;\n        overflow: hidden;\n        outline: 0;\n        cursor: pointer;\n        position: relative;\n        padding: .25em .6em;\n        text-align: center;\n        white-space: nowrap; }\n        .bootstrap3-info tag:not(.readonly):not(.tag--editing):focus {\n          background: #28a1c5; }\n        .bootstrap3-info tag:not(.readonly):not(.tag--editing):active {\n          background: #28a1c5; }\n        .bootstrap3-info tag:not(:focus):not(.tag--editing):not(:active):not(.readonly):hover {\n          background: #46b8da;\n          color: #fff; }\n        .bootstrap3-info tag.readonly {\n          cursor: default; }\n        .bootstrap3-info tag.readonly:focus, .bootstrap3-info tag:focus {\n          outline: 0; }\n        .bootstrap3-info tag.tag--editing {\n          cursor: text; }\n\n      :host {\n        display: block; }\n    `],\n    template: `\n      <!-- CONTAINER -->\n\n      <div ngClass=\"ng2-tag-input {{ theme || '' }}\"\n           (click)=\"focus(true, false)\"\n           [attr.tabindex]=\"-1\"\n\n           (drop)=\"dragZone ? onTagDropped($event, undefined) : undefined\"\n           (dragenter)=\"dragZone ? onDragOver($event) : undefined\"\n           (dragover)=\"dragZone ? onDragOver($event) : undefined\"\n           (dragend)=\"dragZone ? dragProvider.onDragEnd() : undefined\"\n\n           [class.ng2-tag-input--dropping]=\"isDropping()\"\n           [class.ng2-tag-input--disabled]=\"disable\"\n           [class.ng2-tag-input--loading]=\"isLoading\"\n           [class.ng2-tag-input--invalid]=\"hasErrors()\"\n           [class.ng2-tag-input--focused]=\"isInputFocused()\">\n\n          <!-- TAGS -->\n          <div class=\"ng2-tags-container\">\n              <tag *ngFor=\"let item of items; let i = index; trackBy: trackBy\"\n\n                   (onSelect)=\"selectItem(item)\"\n                   (onRemove)=\"onRemoveRequested(item, i)\"\n                   (onKeyDown)=\"handleKeydown($event)\"\n                   (onTagEdited)=\"onTagEdited.emit($event)\"\n                   (onBlur)=\"onTagBlurred($event, i)\"\n                   draggable=\"{{ editable }}\"\n\n                   (dragstart)=\"dragZone ? onDragStarted($event, item, i) : undefined\"\n                   (drop)=\"dragZone ? onTagDropped($event, i) : undefined\"\n                   (dragenter)=\"dragZone ? onDragOver($event) : undefined\"\n                   (dragover)=\"dragZone ? onDragOver($event, i) : undefined\"\n                   (dragleave)=\"dragZone ? dragProvider.onDragEnd() : undefined\"\n\n                   [attr.tabindex]=\"0\"\n                   [disabled]=\"disable\"\n                   [@animation]=\"animationMetadata\"\n                   [hasRipple]=\"ripple\"\n                   [index]=\"i\"\n                   [removable]=\"removable\"\n                   [editable]=\"editable\"\n                   [displayBy]=\"displayBy\"\n                   [identifyBy]=\"identifyBy\"\n                   [template]=\"!!hasCustomTemplate() ? templates.first : undefined\"\n                   [draggable]=\"dragZone\"\n                   [model]=\"item\">\n              </tag>\n\n              <tag-input-form\n                  (onSubmit)=\"onAddingRequested(false, formValue)\"\n                  (onBlur)=\"blur()\"\n                  (click)=\"dropdown ? dropdown.show() : undefined\"\n                  (onKeydown)=\"fireEvents('keydown', $event)\"\n                  (onKeyup)=\"fireEvents('keyup', $event)\"\n\n                  [(inputText)]=\"inputText\"\n                  [disabled]=\"disable\"\n                  [validators]=\"validators\"\n                  [asyncValidators]=\"asyncValidators\"\n                  [hidden]=\"maxItemsReached\"\n                  [placeholder]=\"items.length ? placeholder : secondaryPlaceholder\"\n                  [inputClass]=\"inputClass\"\n                  [inputId]=\"inputId\"\n                  [tabindex]=\"tabindex\">\n              </tag-input-form>\n          </div>\n\n          <div class=\"progress-bar\" *ngIf=\"isLoading\"></div>\n      </div>\n\n      <!-- ERRORS -->\n      <div *ngIf=\"hasErrors()\" class=\"error-messages {{ theme || '' }}\">\n          <p *ngFor=\"let error of inputForm.getErrorMessages(errorMessages)\" class=\"error-message\">\n              <span>{{ error }}</span>\n          </p>\n      </div>\n\n      <ng-content></ng-content>\n    `,\n    animations\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: DragProvider, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'separatorKeys': [{ type: Input },],\n'separatorKeyCodes': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'secondaryPlaceholder': [{ type: Input },],\n'maxItems': [{ type: Input },],\n'validators': [{ type: Input },],\n'asyncValidators': [{ type: Input },],\n'onlyFromAutocomplete': [{ type: Input },],\n'errorMessages': [{ type: Input },],\n'theme': [{ type: Input },],\n'onTextChangeDebounce': [{ type: Input },],\n'inputId': [{ type: Input },],\n'inputClass': [{ type: Input },],\n'clearOnBlur': [{ type: Input },],\n'hideForm': [{ type: Input },],\n'addOnBlur': [{ type: Input },],\n'addOnPaste': [{ type: Input },],\n'pasteSplitPattern': [{ type: Input },],\n'blinkIfDupe': [{ type: Input },],\n'removable': [{ type: Input },],\n'editable': [{ type: Input },],\n'allowDupes': [{ type: Input },],\n'modelAsStrings': [{ type: Input },],\n'trimTags': [{ type: Input },],\n'inputText': [{ type: Input },],\n'ripple': [{ type: Input },],\n'tabindex': [{ type: Input },],\n'disable': [{ type: Input },],\n'dragZone': [{ type: Input },],\n'onRemoving': [{ type: Input },],\n'onAdding': [{ type: Input },],\n'animationDuration': [{ type: Input },],\n'onAdd': [{ type: Output },],\n'onRemove': [{ type: Output },],\n'onSelect': [{ type: Output },],\n'onFocus': [{ type: Output },],\n'onBlur': [{ type: Output },],\n'onTextChange': [{ type: Output },],\n'onPaste': [{ type: Output },],\n'onValidationError': [{ type: Output },],\n'onTagEdited': [{ type: Output },],\n'dropdown': [{ type: ContentChild, args: [TagInputDropdown, ] },],\n'templates': [{ type: ContentChildren, args: [TemplateRef, { descendants: false }, ] },],\n'inputForm': [{ type: ViewChild, args: [TagInputForm, ] },],\n'tags': [{ type: ViewChildren, args: [TagComponent, ] },],\n'inputTextChange': [{ type: Output },],\n'tabindexAttr': [{ type: HostBinding, args: ['attr.tabindex', ] },],\n};\n}\n\nfunction TagInputComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTagInputComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTagInputComponent.ctorParameters;\n/** @type {?} */\nTagInputComponent.propDecorators;\n/**\n * \\@name separatorKeys\n * @desc keyboard keys with which a user can separate items\n * @type {?}\n */\nTagInputComponent.prototype.separatorKeys;\n/**\n * \\@name separatorKeyCodes\n * @desc keyboard key codes with which a user can separate items\n * @type {?}\n */\nTagInputComponent.prototype.separatorKeyCodes;\n/**\n * \\@name placeholder\n * @desc the placeholder of the input text\n * @type {?}\n */\nTagInputComponent.prototype.placeholder;\n/**\n * \\@name secondaryPlaceholder\n * @desc placeholder to appear when the input is empty\n * @type {?}\n */\nTagInputComponent.prototype.secondaryPlaceholder;\n/**\n * \\@name maxItems\n * @desc maximum number of items that can be added\n * @type {?}\n */\nTagInputComponent.prototype.maxItems;\n/**\n * \\@name validators\n * @desc array of Validators that are used to validate the tag before it gets appended to the list\n * @type {?}\n */\nTagInputComponent.prototype.validators;\n/**\n * \\@name asyncValidators\n * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n * @type {?}\n */\nTagInputComponent.prototype.asyncValidators;\n/**\n * - if set to true, it will only possible to add items from the autocomplete\n * \\@name onlyFromAutocomplete\n * @type {?}\n */\nTagInputComponent.prototype.onlyFromAutocomplete;\n/**\n * \\@name errorMessages\n * @type {?}\n */\nTagInputComponent.prototype.errorMessages;\n/**\n * \\@name theme\n * @type {?}\n */\nTagInputComponent.prototype.theme;\n/**\n * \\@name onTextChangeDebounce\n * @type {?}\n */\nTagInputComponent.prototype.onTextChangeDebounce;\n/**\n * - custom id assigned to the input\n * \\@name id\n * @type {?}\n */\nTagInputComponent.prototype.inputId;\n/**\n * - custom class assigned to the input\n * @type {?}\n */\nTagInputComponent.prototype.inputClass;\n/**\n * - option to clear text input when the form is blurred\n * \\@name clearOnBlur\n * @type {?}\n */\nTagInputComponent.prototype.clearOnBlur;\n/**\n * - hideForm\n * \\@name clearOnBlur\n * @type {?}\n */\nTagInputComponent.prototype.hideForm;\n/**\n * \\@name addOnBlur\n * @type {?}\n */\nTagInputComponent.prototype.addOnBlur;\n/**\n * \\@name addOnPaste\n * @type {?}\n */\nTagInputComponent.prototype.addOnPaste;\n/**\n * - pattern used with the native method split() to separate patterns in the string pasted\n * \\@name pasteSplitPattern\n * @type {?}\n */\nTagInputComponent.prototype.pasteSplitPattern;\n/**\n * \\@name blinkIfDupe\n * @type {?}\n */\nTagInputComponent.prototype.blinkIfDupe;\n/**\n * \\@name removable\n * @type {?}\n */\nTagInputComponent.prototype.removable;\n/**\n * \\@name editable\n * @type {?}\n */\nTagInputComponent.prototype.editable;\n/**\n * \\@name allowDupes\n * @type {?}\n */\nTagInputComponent.prototype.allowDupes;\n/**\n * \\@description if set to true, the newly added tags will be added as strings, and not objects\n * \\@name modelAsStrings\n * @type {?}\n */\nTagInputComponent.prototype.modelAsStrings;\n/**\n * \\@name trimTags\n * @type {?}\n */\nTagInputComponent.prototype.trimTags;\n/**\n * \\@name ripple\n * @type {?}\n */\nTagInputComponent.prototype.ripple;\n/**\n * \\@name tabindex\n * @desc pass through the specified tabindex to the input\n * @type {?}\n */\nTagInputComponent.prototype.tabindex;\n/**\n * \\@name disable\n * @type {?}\n */\nTagInputComponent.prototype.disable;\n/**\n * \\@name dragZone\n * @type {?}\n */\nTagInputComponent.prototype.dragZone;\n/**\n * \\@name onRemoving\n * @type {?}\n */\nTagInputComponent.prototype.onRemoving;\n/**\n * \\@name onAdding\n * @type {?}\n */\nTagInputComponent.prototype.onAdding;\n/**\n * \\@name animationDuration\n * @type {?}\n */\nTagInputComponent.prototype.animationDuration;\n/**\n * \\@name onAdd\n * @desc event emitted when adding a new item\n * @type {?}\n */\nTagInputComponent.prototype.onAdd;\n/**\n * \\@name onRemove\n * @desc event emitted when removing an existing item\n * @type {?}\n */\nTagInputComponent.prototype.onRemove;\n/**\n * \\@name onSelect\n * @desc event emitted when selecting an item\n * @type {?}\n */\nTagInputComponent.prototype.onSelect;\n/**\n * \\@name onFocus\n * @desc event emitted when the input is focused\n * @type {?}\n */\nTagInputComponent.prototype.onFocus;\n/**\n * \\@name onFocus\n * @desc event emitted when the input is blurred\n * @type {?}\n */\nTagInputComponent.prototype.onBlur;\n/**\n * \\@name onTextChange\n * @desc event emitted when the input value changes\n * @type {?}\n */\nTagInputComponent.prototype.onTextChange;\n/**\n * - output triggered when text is pasted in the form\n * \\@name onPaste\n * @type {?}\n */\nTagInputComponent.prototype.onPaste;\n/**\n * - output triggered when tag entered is not valid\n * \\@name onValidationError\n * @type {?}\n */\nTagInputComponent.prototype.onValidationError;\n/**\n * - output triggered when tag is edited\n * \\@name onTagEdited\n * @type {?}\n */\nTagInputComponent.prototype.onTagEdited;\n/**\n * \\@name dropdown\n * @type {?}\n */\nTagInputComponent.prototype.dropdown;\n/**\n * \\@name template\n * @desc reference to the template if provided by the user\n * @type {?}\n */\nTagInputComponent.prototype.templates;\n/**\n * \\@name inputForm\n * @type {?}\n */\nTagInputComponent.prototype.inputForm;\n/**\n * \\@name selectedTag\n * @desc reference to the current selected tag\n * @type {?}\n */\nTagInputComponent.prototype.selectedTag;\n/**\n * \\@name isLoading\n * @type {?}\n */\nTagInputComponent.prototype.isLoading;\n/**\n * \\@name tags\n * @desc list of Element items\n * @type {?}\n */\nTagInputComponent.prototype.tags;\n/**\n * \\@name listeners\n * @desc array of events that get fired using \\@fireEvents\n * @type {?}\n */\nTagInputComponent.prototype.listeners;\n/**\n * \\@description emitter for the 2-way data binding inputText value\n * \\@name inputTextChange\n * @type {?}\n */\nTagInputComponent.prototype.inputTextChange;\n/**\n * \\@description private variable to bind get/set\n * \\@name inputTextValue\n * @type {?}\n */\nTagInputComponent.prototype.inputTextValue;\n/**\n * \\@name animationMetadata\n * @type {?}\n */\nTagInputComponent.prototype.animationMetadata;\n/**\n * \\@name appendTag\n * \\@param tag {TagModel}\n * @type {?}\n */\nTagInputComponent.prototype.appendTag;\n/**\n * \\@name createTag\n * \\@param model\n * @type {?}\n */\nTagInputComponent.prototype.createTag;\n/**\n * \\@name onPasteCallback\n * \\@param data\n * @type {?}\n */\nTagInputComponent.prototype.onPasteCallback;\n/** @type {?} */\nTagInputComponent.prototype.renderer;\n/** @type {?} */\nTagInputComponent.prototype.dragProvider;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component } from '@angular/core';\nexport class DeleteIconComponent {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'delete-icon',\n    template: `\n      <span>\n          <svg height=\"16px\" viewBox=\"0 0 32 32\" width=\"16px\">\n              <path d=\"M17.459,16.014l8.239-8.194c0.395-0.391,0.395-1.024,0-1.414c-0.394-0.391-1.034-0.391-1.428,0  l-8.232,8.187L7.73,6.284c-0.394-0.395-1.034-0.395-1.428,0c-0.394,0.396-0.394,1.037,0,1.432l8.302,8.303l-8.332,8.286  c-0.394,0.391-0.394,1.024,0,1.414c0.394,0.391,1.034,0.391,1.428,0l8.325-8.279l8.275,8.276c0.394,0.395,1.034,0.395,1.428,0  c0.394-0.396,0.394-1.037,0-1.432L17.459,16.014z\"\n                    fill=\"#121313\" />\n          </svg>\n      </span>\n    `,\n    styles: [`\n      .dark tag:focus {\n        -webkit-box-shadow: 0 0 0 1px #323232;\n                box-shadow: 0 0 0 1px #323232; }\n\n      .ng2-tag-input.bootstrap3-info {\n        background-color: #fff;\n        display: inline-block;\n        color: #555;\n        vertical-align: middle;\n        max-width: 100%;\n        height: 42px;\n        line-height: 44px; }\n\n      .ng2-tag-input.bootstrap3-info input {\n        border: none;\n        -webkit-box-shadow: none;\n                box-shadow: none;\n        outline: none;\n        background-color: transparent;\n        padding: 0 6px;\n        margin: 0;\n        width: auto;\n        max-width: inherit; }\n\n      .ng2-tag-input.bootstrap3-info .form-control input::-moz-placeholder {\n        color: #777;\n        opacity: 1; }\n\n      .ng2-tag-input.bootstrap3-info .form-control input:-ms-input-placeholder {\n        color: #777; }\n\n      .ng2-tag-input.bootstrap3-info .form-control input::-webkit-input-placeholder {\n        color: #777; }\n\n      .ng2-tag-input.bootstrap3-info input:focus {\n        border: none;\n        -webkit-box-shadow: none;\n                box-shadow: none; }\n\n      .bootstrap3-info.ng2-tag-input.ng2-tag-input--focused {\n        -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.4);\n                box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.4);\n        border: 1px solid #ccc; }\n\n      .bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid {\n        -webkit-box-shadow: inset 0 1px 1px #d9534f;\n                box-shadow: inset 0 1px 1px #d9534f; }\n\n      .ng2-tag-input {\n        display: block;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        -ms-flex-wrap: wrap;\n            flex-wrap: wrap;\n        position: relative;\n        -webkit-transition: all 0.25s;\n        transition: all 0.25s;\n        padding: 0.25rem 0;\n        min-height: 32px;\n        cursor: text;\n        border-bottom: 2px solid #efefef; }\n        .ng2-tag-input:focus {\n          outline: 0; }\n        .ng2-tag-input.ng2-tag-input--dropping {\n          opacity: 0.7; }\n        .ng2-tag-input.ng2-tag-input--focused {\n          border-bottom: 2px solid #2196F3; }\n        .ng2-tag-input.ng2-tag-input--invalid {\n          border-bottom: 2px solid #f44336; }\n        .ng2-tag-input.ng2-tag-input--loading {\n          border: none; }\n        .ng2-tag-input.ng2-tag-input--disabled {\n          opacity: 0.5;\n          cursor: not-allowed; }\n        .ng2-tag-input form {\n          margin: 0.1em 0; }\n        .ng2-tag-input .ng2-tags-container {\n          -ms-flex-wrap: wrap;\n              flex-wrap: wrap;\n          display: -webkit-box;\n          display: -ms-flexbox;\n          display: flex; }\n\n      .minimal.ng2-tag-input {\n        display: block;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        -ms-flex-wrap: wrap;\n            flex-wrap: wrap;\n        position: relative;\n        cursor: text;\n        border-bottom: 1px solid transparent; }\n        .minimal.ng2-tag-input:focus {\n          outline: 0; }\n        .minimal.ng2-tag-input.ng2-tag-input--dropping {\n          opacity: 0.7; }\n        .minimal.ng2-tag-input.ng2-tag-input--loading {\n          border: none; }\n        .minimal.ng2-tag-input.ng2-tag-input--disabled {\n          opacity: 0.5;\n          cursor: not-allowed; }\n        .minimal.ng2-tag-input .ng2-tags-container {\n          -ms-flex-wrap: wrap;\n              flex-wrap: wrap;\n          display: -webkit-box;\n          display: -ms-flexbox;\n          display: flex; }\n\n      .dark.ng2-tag-input {\n        display: block;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        -ms-flex-wrap: wrap;\n            flex-wrap: wrap;\n        position: relative;\n        cursor: text;\n        border-bottom: 2px solid #444; }\n        .dark.ng2-tag-input:focus {\n          outline: 0; }\n        .dark.ng2-tag-input.ng2-tag-input--dropping {\n          opacity: 0.7; }\n        .dark.ng2-tag-input.ng2-tag-input--loading {\n          border: none; }\n        .dark.ng2-tag-input.ng2-tag-input--disabled {\n          opacity: 0.5;\n          cursor: not-allowed; }\n        .dark.ng2-tag-input .ng2-tags-container {\n          -ms-flex-wrap: wrap;\n              flex-wrap: wrap;\n          display: -webkit-box;\n          display: -ms-flexbox;\n          display: flex; }\n\n      .bootstrap.ng2-tag-input {\n        display: block;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        -ms-flex-wrap: wrap;\n            flex-wrap: wrap;\n        position: relative;\n        cursor: text;\n        border-bottom: 2px solid #efefef; }\n        .bootstrap.ng2-tag-input:focus {\n          outline: 0; }\n        .bootstrap.ng2-tag-input.ng2-tag-input--dropping {\n          opacity: 0.7; }\n        .bootstrap.ng2-tag-input.ng2-tag-input--focused {\n          border-bottom: 2px solid #0275d8; }\n        .bootstrap.ng2-tag-input.ng2-tag-input--invalid {\n          border-bottom: 2px solid #d9534f; }\n        .bootstrap.ng2-tag-input.ng2-tag-input--loading {\n          border: none; }\n        .bootstrap.ng2-tag-input.ng2-tag-input--disabled {\n          opacity: 0.5;\n          cursor: not-allowed; }\n        .bootstrap.ng2-tag-input .ng2-tags-container {\n          -ms-flex-wrap: wrap;\n              flex-wrap: wrap;\n          display: -webkit-box;\n          display: -ms-flexbox;\n          display: flex; }\n\n      .bootstrap3-info.ng2-tag-input {\n        display: block;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        -ms-flex-wrap: wrap;\n            flex-wrap: wrap;\n        position: relative;\n        padding: 4px;\n        cursor: text;\n        -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n                box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n        border-radius: 4px; }\n        .bootstrap3-info.ng2-tag-input:focus {\n          outline: 0; }\n        .bootstrap3-info.ng2-tag-input.ng2-tag-input--dropping {\n          opacity: 0.7; }\n        .bootstrap3-info.ng2-tag-input.ng2-tag-input--invalid {\n          border-bottom: 1px solid #d9534f; }\n        .bootstrap3-info.ng2-tag-input.ng2-tag-input--loading {\n          border: none; }\n        .bootstrap3-info.ng2-tag-input.ng2-tag-input--disabled {\n          opacity: 0.5;\n          cursor: not-allowed; }\n        .bootstrap3-info.ng2-tag-input form {\n          margin: 0.1em 0; }\n        .bootstrap3-info.ng2-tag-input .ng2-tags-container {\n          -ms-flex-wrap: wrap;\n              flex-wrap: wrap;\n          display: -webkit-box;\n          display: -ms-flexbox;\n          display: flex; }\n\n      .error-message {\n        font-size: 0.8em;\n        color: #f44336;\n        margin: 0.5em 0 0 0; }\n\n      .bootstrap .error-message {\n        color: #d9534f; }\n\n      :host(delete-icon) {\n        width: 20px;\n        height: 16px;\n        -webkit-transition: all 0.15s;\n        transition: all 0.15s;\n        display: inline-block;\n        text-align: right; }\n        :host(delete-icon) path {\n          fill: #444; }\n        :host(delete-icon) svg {\n          vertical-align: bottom;\n          height: 34px; }\n\n      :host(delete-icon):hover {\n        -webkit-transform: scale(1.5) translateY(-3px);\n                transform: scale(1.5) translateY(-3px); }\n\n      :host-context(.dark) {\n        text-align: right; }\n        :host-context(.dark) path {\n          fill: #fff; }\n        :host-context(.dark) svg {\n          vertical-align: bottom;\n          height: 34px; }\n\n      :host-context(.minimal) {\n        text-align: right; }\n        :host-context(.minimal) path {\n          fill: #444; }\n        :host-context(.minimal) svg {\n          vertical-align: bottom;\n          height: 34px; }\n\n      :host-context(.bootstrap) {\n        text-align: right; }\n        :host-context(.bootstrap) path {\n          fill: #fff; }\n        :host-context(.bootstrap) svg {\n          vertical-align: bottom;\n          height: 34px; }\n\n      :host-context(tag:focus) path,\n      :host-context(tag:active) path {\n        fill: #fff; }\n\n      :host-context(.dark tag:focus) path,\n      :host-context(.dark tag:active) path {\n        fill: #000; }\n\n      :host-context(.minimal tag:focus) path,\n      :host-context(.minimal tag:active) path {\n        fill: #000; }\n\n      :host-context(.bootstrap tag:focus) path,\n      :host-context(.bootstrap tag:active) path {\n        fill: #fff; }\n\n      :host-context(.bootstrap3-info) {\n        height: inherit; }\n        :host-context(.bootstrap3-info) path {\n          fill: #fff; }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DeleteIconComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nDeleteIconComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDeleteIconComponent.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule, FormsModule, COMPOSITION_BUFFER_MODE } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Ng2DropdownModule } from 'ng2-material-dropdown';\nimport { HighlightPipe } from './core/pipes/highlight.pipe';\nimport { DragProvider } from './core/providers/drag-provider';\nimport { OptionsProvider, Options } from './core/providers/options-provider';\nimport { TagInputComponent } from './components/tag-input/tag-input';\nimport { DeleteIconComponent } from './components/icon/icon';\nimport { TagInputForm } from './components/tag-input-form/tag-input-form.component';\nimport { TagComponent } from './components/tag/tag.component';\nimport { TagInputDropdown } from './components/dropdown/tag-input-dropdown.component';\nimport { TagRipple } from './components/tag/tag-ripple.component';\n\nconst /** @type {?} */ optionsProvider = new OptionsProvider();\nexport class TagInputModule {\n/**\n * \\@name withDefaults\n * @param {?} options {Options}\n * @return {?}\n */\npublic static withDefaults(options: Options): void {\n        optionsProvider.setOptions(options);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        ReactiveFormsModule,\n        FormsModule,\n        Ng2DropdownModule\n    ],\n    declarations: [\n        TagInputComponent,\n        DeleteIconComponent,\n        TagInputForm,\n        TagComponent,\n        HighlightPipe,\n        TagInputDropdown,\n        TagRipple\n    ],\n    exports: [\n        TagInputComponent,\n        DeleteIconComponent,\n        TagInputForm,\n        TagComponent,\n        HighlightPipe,\n        TagInputDropdown,\n        TagRipple\n    ],\n    providers: [\n        DragProvider,\n        { provide: COMPOSITION_BUFFER_MODE, useValue: false },\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TagInputModule_tsickle_Closure_declarations() {\n/** @type {?} */\nTagInputModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTagInputModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["isObject","obj","Object","listen","listenerType","action","condition","this","listeners","hasOwnProperty","Error","push","HighlightPipe","prototype","transform","value","arg","trim","regex","RegExp","s","replace","escape","e","decorators","type","Pipe","args","name","ctorParameters","KEYDOWN","KEYUP","ACTIONS_KEYS","KEY_PRESS_ACTIONS","8","37","39","9","NEXT","DragProvider","state","dragging","dropping","index","undefined","setDraggedItem","event","tag","dataTransfer","setData","JSON","stringify","getDraggedItem","data","getData","parse","setSender","sender","setReceiver","receiver","onTagDropped","indexDragged","indexDropped","onDragEnd","onRemoveRequested","onAddingRequested","setState","assign","getState","key","Injectable","defaults","tagInput","separatorKeys","separatorKeyCodes","maxItems","Infinity","placeholder","secondaryPlaceholder","validators","asyncValidators","onlyFromAutocomplete","errorMessages","theme","onTextChangeDebounce","inputId","inputClass","clearOnBlur","hideForm","addOnBlur","addOnPaste","pasteSplitPattern","blinkIfDupe","removable","editable","allowDupes","modelAsStrings","trimTags","ripple","tabIndex","disable","dragZone","onRemoving","onAdding","displayBy","identifyBy","animationDuration","enter","leave","dropdown","appendToBody","offset","focusFirstElement","showDropdownIfEmpty","minimumTextLength","limitItemsTo","keepOpen","matchingFn","target","targetValue","toString","toLowerCase","indexOf","OptionsProvider","setOptions","options","TagInputAccessor","_items","defineProperty","get","set","items","_onChangeCallback","onTouched","_onTouchedCallback","writeValue","registerOnChange","fn","registerOnTouched","getItemValue","item","getItemDisplay","getItemsWithout","filter","position","propDecorators","Input","TagInputForm","onSubmit","EventEmitter","onBlur","onFocus","onKeyup","onKeydown","tabindex","disabled","inputTextChange","inputTextValue","text","emit","ngOnInit","form","FormGroup","FormControl","isInputFocused","document","activeElement","input","nativeElement","getErrorMessages","messages","keys","err","hasError","map","hasErrors","dirty","invalid","focus","blur","getElementPosition","getBoundingClientRect","destroy","parentElement","removeChild","onKeyDown","$event","submit","Component","selector","styles","template","Output","inputText","ViewChild","forwardRef","TagInputDropdown","injector","_this","TagInputComponent","_autocompleteItems","show","maxItemsReached","length","getFormValue","hasMinimumText","calculatePosition","getMatchingItems","hasItems","isHidden","isVisible","shouldShow","shouldHide","autocompleteObservable","getItemsFromObservable","hide","setItems","requestAdding","createTagModel","resetItems","setLoadingState","first","subscribe","populateItems","_a","onItemClicked","onHide","KEEP_OPEN","onTextChange","asObservable","debounceTime","updatePosition","inputForm","menu","menuState","dropdownState","selectedItem","scrollListener","onWindowBlur","formValue","display","dupesAllowed","autocompleteItems","hasValue","tags","some","model","slice","isLoading","Injector","Ng2Dropdown","templates","ContentChildren","TemplateRef","HostListener","TagRipple","animations","trigger","style","width","opacity","transition","animate","keyframes","borderRadius","KeyboardEvent","MouseEvent","navigator","window","userAgent","vendor","isChrome","test","TagComponent","element","renderer","cdRef","onSelect","onRemove","onTagEdited","editing","rippleState","readonly","select","stopPropagation","remove","move","moving","keydown","keyCode","disableEditMode","blink","classList","add","setTimeout","toggleEditMode","activateEditMode","onBlurred","innerText","result","getDisplayValue","hasRipple","getContentEditableText","storeNewValue","detectChanges","preventDefault","setContentEditableText","isDeleteIconVisible","getContentEditable","exists","querySelector","ElementRef","Renderer2","ChangeDetectorRef","HostBinding","CUSTOM_ACCESSOR","DragEvent","provide","NG_VALUE_ACCESSOR","useExisting","multi","_super","dragProvider","call","onAdd","onPaste","onValidationError","constants.KEYDOWN","constants.KEYUP","appendTag","concat","createTag","val","onPasteCallback","clipboardData","split","forEach","setInputValue","__extends","ngAfterViewInit","setUpKeypressListeners","setupSeparatorKeysListener","setUpInputKeydownListeners","observers","setUpTextChangeSubscriber","setUpOnBlurSubscriber","setUpOnPasteListener","console","warn","setAnimationMetadata","subscribeFn","removeItem","fromAutocomplete","addItem","selectItem","selectedTag","fireEvents","eventName","listener","handleKeydown","which","constants.KEY_PRESS_ACTIONS","constants.ACTIONS_KEYS","moveToTag","constants.NEXT","getControl","setValue","applyFocus","displayAutocomplete","hasCustomTemplate","menuTemplate","Boolean","onDragStarted","zone","onDragOver","isDropping","isReceiver","onTagBlurred","changedElement","trackBy","isTagValid","dupe","findDupe","find","isFromAutocomplete","assertions","direction","isLast","last","isFirst","getTagIndex","getTagAtIndex","toArray","findIndex","Observable","of","isValid","valid","useSeparatorKeys","hasKeyCode","hasKey","valueChanges","id","animationMetadata","params","providers","ContentChild","descendants","ViewChildren","tabindexAttr","DeleteIconComponent","optionsProvider","TagInputModule","withDefaults","NgModule","imports","CommonModule","ReactiveFormsModule","FormsModule","Ng2DropdownModule","declarations","exports","COMPOSITION_BUFFER_MODE","useValue"],"mappings":"q/BASA,SAAAA,EAHCC,GAIG,OAHOA,IAAQC,OAAOD,GCC1B,SAAAE,EADCC,EAAAC,EAAAC,GAGG,QAHJ,IAAAA,IAACA,GAAD,IAESC,KAAKC,UAAUC,eAAeL,GAE/B,MADM,IAAIM,MAAM,kCAIfJ,GAMLC,KADKC,UAAUJ,GAAcO,KAAKN,0UChBtCO,EAAA,WAAA,SAAAA,YASKA,EAALC,UAAAC,UAAK,SAAAC,EAAAC,GADG,IAEKA,EAAIC,OADL,OAEOF,EACX,IACI,IAEMG,EAAQ,IAAIC,OAAO,IAhBtB,SAAAC,GAAK,OAAAA,EAAEC,QAAQ,yBAA0B,QAgBlBC,CAAUN,GAFhD,IAEyD,KAD7C,OAEOD,EAAMM,QAAQH,EAAO,aAC9B,MAAAK,GADE,OAEOR,MAlBnB,GAqBOH,EAAPY,aACEC,KAAMC,EAAAA,KAAMC,OADVC,KAEM,gBAIThB,EAADiB,eAAC,WAAA,UC1BD,IAEaC,EAAU,UACVC,EAAQ,QAIRC,EACD,SADCA,EAEI,cAFJA,EAGI,cAHJA,EAIJ,MAGIC,GACTC,EAAGF,EACHG,GAAIH,EACJI,GAAIJ,EACJK,EAAGL,GAIMM,EAAO,OCNpBC,EAAA,WAAA,SAAAA,IAMWhC,KAAXiC,OAFQC,UAGU,EAFVC,UAGU,EAFVC,MAGOC,kBAQVL,EAAL1B,UAAAgC,eAAK,SAAAC,EAAAC,GAFGD,EAGME,aAAaC,QDbM,OCaqBC,KAAKC,UAAUJ,KAOhER,EAAL1B,UAAAuC,eAAK,SAAAN,GAFG,IAGMO,EAAOP,EAAME,aAAaM,QDrBP,QCoBzB,OAGOJ,KAAKK,MAAMF,IAOrBd,EAAL1B,UAAA2C,UAAK,SAAAC,GAFGlD,KAGKkD,OAASA,GAOjBlB,EAAL1B,UAAA6C,YAAK,SAAAC,GAFGpD,KAGKoD,SAAWA,GASnBpB,EAAL1B,UAAA+C,aAAK,SAAAb,EAAAc,EAAAC,GAFGvD,KAGKwD,YADLxD,KAGKkD,OAAOO,kBAAkBjB,EAAKc,GAFnCtD,KAGKoD,SAASM,mBAAkB,EAAOlB,EAAKe,IAO/CvB,EAAL1B,UAAAqD,SAAK,SAAA1B,GAFGjC,KAGKiC,MAHbtC,OAAAiE,UAGuB5D,KAAOiC,MAAOA,IAOhCD,EAAL1B,UAAAuD,SAAK,SAAAC,GAFG,OAGOA,EAAM9D,KAAKiC,MAAM6B,GAAO9D,KAAKiC,OAMvCD,EAAL1B,UAAAkD,UAAK,WAFGxD,KAGK2D,UAFDzB,UAGU,EAFVC,UAGU,EAFVC,MAGOC,eAnFnB,GAsFOL,EAAPf,aACEC,KAAM6C,EAAAA,aAGP/B,EAADV,eAAC,WAAA,UCnDM,IAAM0C,GACTC,UACIC,iBACAC,qBACAC,SAAUC,SACVC,YF5DmB,QE6DnBC,qBF5D6B,kBE6D7BC,cACAC,mBACAC,sBAAsB,EACtBC,iBACAC,MAAO,GACPC,qBAAsB,IACtBC,QAAS,GACTC,WAAY,GACZC,aAAa,EACbC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,kBAAmB,IACnBC,aAAa,EACbC,WAAW,EACXC,UAAU,EACVC,YAAY,EACZC,gBAAgB,EAChBC,UAAU,EACVC,QAAQ,EACRC,SAAU,GACVC,SAAS,EACTC,SAAU,GACVC,WAAY1D,UACZ2D,SAAU3D,UACV4D,UAAW,UACXC,WAAY,QACZC,mBACIC,MAAO,QACPC,MAAO,UAGfC,UACIL,UAAW,UACXC,WAAY,QACZK,cAAc,EACdC,OAAQ,OACRC,mBAAmB,EACnBC,qBAAqB,EACrBC,kBAAmB,EACnBC,aAAcvC,SACdwC,UAAU,EACVC,WAUR,SAACtG,EAAAuG,GACG,IAAMC,EAAcD,EAAO/G,KAAKiG,WAAWgB,WAE3C,OAAOD,GAAeA,EACjBE,cACAC,QAAQ3G,EAAM0G,gBAAkB,KCjHzCE,EAAA,WAAA,SAAAA,YAIKA,EAAL9G,UAAA+G,WAAK,SAAAC,GAGGF,EAFgBpD,SAASC,SAEjCtE,OAAAiE,UAF8CI,EAAWC,SAAUqD,EAAWrD,UAGtEmD,EAFgBpD,SAASsC,SAEjC3G,OAAAiE,UAF8CI,EAAWsC,SAAUgB,EAAWhB,aAN9E,GAEkBc,EAAlBpD,SAA6BA,ENA7B,IAAAuD,EAAA,WAAA,SAAAA,IADYvH,KAAZwH,UAQMxH,KAANiG,UAAMmB,EAAApD,SAAAC,SAAAgC,UAMAjG,KAANkG,WAAMkB,EAAApD,SAAAC,SAAAiC,kBAENvG,OAAA8H,eAAKF,EAALjH,UAAA,SAAAoH,IAAA,WACQ,OAAO1H,KAAKwH,QAMpBG,IAAA,SAHKC,GAIG5H,KAHKwH,OAASI,EAId5H,KAHK6H,kBAAkB7H,KAAKwH,yCAG/BD,EAALjH,UAAAwH,UAAK,WAMG9H,KALK+H,sBAGRR,EAALjH,UAAA0H,WAAK,SAAAJ,GASG5H,KARKwH,OAASI,OAGjBL,EAALjH,UAAA2H,iBAAK,SAAAC,GAYGlI,KAXK6H,kBAAoBK,GAG5BX,EAALjH,UAAA6H,kBAAK,SAAAD,GAeGlI,KAdK+H,mBAAqBG,GAQ7BX,EAALjH,UAAA8H,aAAK,SAAAC,GAcG,OAbO5I,EAAS4I,GAAQA,EAAKrI,KAAKkG,YAAcmC,GAQnDd,EAALjH,UAAAgI,eAAK,SAAAD,GAaG,OAZO5I,EAAS4I,GAAQA,EAAKrI,KAAKiG,WAAaoC,GAQlDd,EAALjH,UAAAiI,gBAAK,SAAAnG,GAYG,OAXOpC,KAAK4H,MAAMY,OAAO,SAACH,EAAMI,GAAa,OAAAA,IAAarG,OAhElE,GAkEOmF,EAAPmB,gBAYAzC,YAXgB/E,KAAMyH,EAAAA,QAYtBzC,aAXiBhF,KAAMyH,EAAAA,SO9EvB,IAAAC,EAAA,WAAA,SAAAA,IAOM5I,KAAN6I,SAAM,IAAAC,EAAAA,aAMA9I,KAAN+I,OAAM,IAAAD,EAAAA,aAMA9I,KAANgJ,QAAM,IAAAF,EAAAA,aAMA9I,KAANiJ,QAAM,IAAAH,EAAAA,aAMA9I,KAANkJ,UAAM,IAAAJ,EAAAA,aAcA9I,KAANwE,cAOMxE,KAANyE,mBA0BMzE,KAANmJ,SAAM,GAKAnJ,KAANoJ,UAAM,EAyBApJ,KAANqJ,gBAAM,IAAAP,EAAAA,aAKD9I,KAALsJ,eAAK,UAnEL3J,OAAA8H,eAuBMmB,EAvBNtI,UAAA,aAAAoH,IAAA,WACQ,OAuBO1H,KAAKsJ,gBAPpB3B,IAAA,SA0BK4B,GAzBGvJ,KA0BKsJ,eAAiBC,EAzBtBvJ,KA0BKqJ,gBAAgBG,KAAKD,oCAwB7BX,EAALtI,UAAAmJ,SAAK,WA3BGzJ,KA6BK0J,KAAO,IAAIC,EAAAA,WA5BZtB,KA6BM,IAAIuB,EAAAA,aAAapJ,MAAO,GAAI4I,SAAUpJ,KAAKoJ,UAAWpJ,KAAKwE,WAAYxE,KAAKyE,oBAtB9F9E,OAAA8H,eA8BKmB,EA9BLtI,UAAA,SAAAoH,IAAA,WACQ,OA8BO1H,KAAK0J,KAAKhC,IAAI,yCAOxBkB,EAALtI,UAAAuJ,eAAK,WA9BG,OA+BOC,SAASC,gBAAkB/J,KAAKgK,MAAMC,eAQhDrB,EAALtI,UAAA4J,iBAAK,SAAAC,GA/BG,IAgCM3J,EAAQR,KAAKQ,MA9BnB,OAgCOA,EAAQb,OAAOyK,KAAKD,GA/BtB3B,OAgCO,SAAA6B,GAAO,OAAA7J,EAAM8J,SAASD,KA/B7BE,IAgCI,SAAAF,GAAO,OAAAF,EAASE,SAO5BzB,EAALtI,UAAAkK,UAAK,WAhCG,OAiCOxK,KAAK0J,KAAKe,OAhCbzK,KAiCK0J,KAAKlJ,MAAM6H,MAhChBrI,KAiCK0J,KAAKgB,SAMjB9B,EAALtI,UAAAqK,MAAK,WAhCG3K,KAiCKgK,MAAMC,cAAcU,SAM5B/B,EAALtI,UAAAsK,KAAK,WAhCG5K,KAiCKgK,MAAMC,cAAcW,QAO5BhC,EAALtI,UAAAuK,mBAAK,WAjCG,OAkCO7K,KAAKgK,MAAMC,cAAca,yBAOnClC,EAALtI,UAAAyK,QAAK,WAjCG,IAkCMf,EAAQhK,KAAKgK,MAAMC,cAjCzBD,EAkCMgB,cAAcC,YAAYjB,IAOnCpB,EAALtI,UAAA4K,UAAK,SAAAC,GAjCG,OAkCOnL,KAAKkJ,UAAUM,KAAK2B,IAM9BvC,EAALtI,UAAA8K,OAAK,SAAAD,GAhCGnL,KAiCK6I,SAASW,KAAK2B,MA5M3B,GA8MOvC,EAAP3H,aACEC,KAAMmK,EAAAA,UAAWjK,OAhCfkK,SAiCU,iBAhCVC,QAiCQ,6mPAkMRC,SAiCU,27BA8Bb5C,EAADtH,eAAC,WAAA,UAEMsH,EAAPF,gBA9BAG,WA+Be3H,KAAMuK,EAAAA,SA9BrB1C,SA+Ba7H,KAAMuK,EAAAA,SA9BnBzC,UA+Bc9H,KAAMuK,EAAAA,SA9BpBxC,UA+Bc/H,KAAMuK,EAAAA,SA9BpBvC,YA+BgBhI,KAAMuK,EAAAA,SA9BtBnH,cA+BkBpD,KAAMyH,EAAAA,QA9BxBnE,aA+BiBtD,KAAMyH,EAAAA,QA9BvBlE,kBA+BsBvD,KAAMyH,EAAAA,QA9B5B7D,UA+Bc5D,KAAMyH,EAAAA,QA9BpB5D,aA+BiB7D,KAAMyH,EAAAA,QA9BvB+C,YA+BgBxK,KAAMyH,EAAAA,QA9BtBQ,WA+BejI,KAAMyH,EAAAA,QA9BrBS,WA+BelI,KAAMyH,EAAAA,QA9BrBqB,QA+BY9I,KAAMyK,EAAAA,UAAWvK,MAAM,WA9BnCiI,kBA+BsBnI,KAAMuK,EAAAA,UCzc5B,IADMzH,EAA0C4H,EAAAA,WAAW,WAAM,OAAAxE,EAAgBpD,SAASsC,WAE1FuF,EAAA,WAuGA,SAAAA,EAwBiCC,GAxBjC,IAAAC,EAAA/L,KAwBiCA,KAAjC8L,SAAiCA,EA7G3B9L,KAANwG,QAAM,IAAAxC,GAAAwC,OAMAxG,KAANyG,mBAAM,IAAAzC,GAAAyC,kBAOAzG,KAAN0G,qBAAM,IAAA1C,GAAA0C,oBAYA1G,KAAN2G,mBAAM,IAAA3C,GAAA2C,kBAMA3G,KAAN4G,cAAM,IAAA5C,GAAA4C,aAKA5G,KAANiG,WAAM,IAAAjC,GAAAiC,UAKAjG,KAANkG,YAAM,IAAAlC,GAAAkC,WAMAlG,KAAN8G,YAAM,IAAA9C,GAAA8C,WAMA9G,KAANuG,cAAM,IAAAvC,GAAAuC,aAOAvG,KAAN6G,UAAM,IAAA7C,GAAA6C,SAOD7G,KAAL4H,SAKK5H,KAALiE,SAAKjE,KAAA8L,SAAApE,IAAAsE,GAOAhM,KAALiM,sBA+GKjM,KAALkM,KAAK,WA7BG,IAAMC,EAAkBJ,EAAK9H,SAAS2D,MAAMwE,SAAWL,EAAK9H,SAASG,SAC/D5D,EAAQuL,EAAKM,eACbC,EAAiB9L,EAAME,OAAO0L,QAAUL,EAAKpF,kBAC7C8B,EAAWsD,EAAKQ,oBAChB3E,EAAQmE,EAAKS,iBAAiBhM,GAC9BiM,EAAW7E,EAAMwE,OAAS,EAC1BM,GAA8B,IAAnBX,EAAKY,UAChBjG,EAAsBqF,EAAKrF,qBAAuB+F,IAAajM,EAG/DoM,EAAaF,IAAcD,GAAYH,GAAmB5F,GAC1DmG,EAAad,EAAKY,YAAcF,EAEtC,OAAIV,EAAKe,wBAA0BR,EACxBP,EAAKgB,uBAAuBvM,GAGlCuL,EAAKrF,qBAAwBlG,EAI9B2L,EACOJ,EAAKzF,SAAS0G,QAGzBjB,EAAKkB,SAASrF,QAEVgF,EACAb,EAAKzF,SAAS4F,KAAKzD,GACZoE,GACPd,EAAKiB,SAZEjB,EAAKzF,SAAS0G,QA4F5BhN,KAALkN,cAAK,SAAA7E,GAhCG0D,EAAK9H,SAASP,mBAAkB,EAAMqI,EAAKoB,eAAe9E,KAsF7DrI,KAALoN,WAAK,WAlCGrB,EAAKnE,UAyDR5H,KAAL+M,uBAAK,SAAAxD,GAnCGwC,EAAKsB,iBAAgB,GAiBrBtB,EAAKe,uBAAuBvD,GACvB+D,QACAC,UAjBe,SAACzK,GAEjBiJ,EAAKsB,iBAAgB,GAEhBG,cAAc1K,GAEnBiJ,EAAKkB,SAASlB,EAAKS,iBAAiBjD,IAEhCwC,EAAKnE,MAAMwE,OACXL,EAAKzF,SAAS4F,KAAKH,EAAKQ,sBAChBR,EAAKrF,qBAAuBqF,EAAKY,WACzCZ,EAAKzF,SAAS0G,QAMM,WAAM,OAAAjB,EAAKsB,iBAAgB,aAhR/D1N,OAAA8H,eAyBKoE,EAzBLvL,UAAA,qBAQAoH,IAAA,WAAA,IAAAqE,EAAA/L,KA2Bc4H,EAAQ5H,KAAKiM,mBAxBnB,OA0BKrE,EAIEA,EAAM2C,IAAI,SAAClC,GAzBd,MA0BuB,iBAATA,GA1B1BoF,KACgBA,EAAC1B,EA0BK9F,WAAYoC,EAzBlBoF,EAAC1B,EA0BK7F,YAAamC,EACnCoF,GAAgBpF,cA7ChBV,IAAA,SAyBKC,GAxBG5H,KAyBKiM,mBAAqBrE,mCA4B7BiE,EAALvL,UAAAmJ,SAAK,WAvBGzJ,KAwBK0N,gBAAgBH,UAAUvN,KAAKkN,eArBpClN,KAwBK2N,SAASJ,UAAUvN,KAAKoN,YAtB7B,IAyBMQ,EAAY5N,KAAK6G,SAtBvB7G,KAwBKiE,SAvBA4J,aACAC,eACAC,aAkBiB,KAjBjBvF,OAwBO,SAAChI,GAvBL,OAwBkB,IAxBdoN,GAyBOpN,EAAM4L,OAAS,IAnB7BmB,UAwBUvN,KAAKkM,OAMvBL,EAALvL,UAAA0N,eAAK,WAvBG,IAwBMvF,EAAWzI,KAAKiE,SAASgK,UAAUpD,qBAtBzC7K,KAwBKsG,SAAS4H,KAAKF,eAAevF,IAlB1C9I,OAAA8H,eAyBKoE,EAzBLvL,UAAA,aAAAoH,IAAA,WACQ,OAyBO1H,KAAKsG,SAAS4H,KAAKjM,MAAMkM,UAAUxB,2CAO7Cd,EAALvL,UAAAqN,OAAK,WAzBG,OA0BO3N,KAAKsG,SAASqH,QAOxB9B,EAALvL,UAAAoN,cAAK,WA1BG,OA2BO1N,KAAKsG,SAASoH,eArB7B/N,OAAA8H,eA4BKoE,EA5BLvL,UAAA,gBAAAoH,IAAA,WACQ,OA4BO1H,KAAKsG,SAAS4H,KAAKjM,MAAMmM,cAAcC,8CAtBtD1O,OAAA8H,eA6BKoE,EA7BLvL,UAAA,SAAAoH,IAAA,WACQ,OA6BO1H,KAAKsG,SAAS4H,KAAKjM,uCA6C7B4J,EAALvL,UAAA0M,KAAK,WA7BGhN,KA8BKoN,aA7BLpN,KA8BKsG,SAAS0G,QAOjBnB,EAALvL,UAAAgO,eAAK,WACQtO,KAAK2M,WA3BV3M,KA+BKgO,kBAORnC,EAALvL,UAAAiO,aAAK,WA/BGvO,KAgCKsG,SAAS0G,QAMjBnB,EAALvL,UAAA+L,aAAK,WA/BG,OAgCOrM,KAAKiE,SAASuK,UAAU9N,QAMlCmL,EAALvL,UAAAiM,kBAAK,WA/BG,OAgCOvM,KAAKiE,SAASgK,UAAUpD,sBAgBlCgB,EAALvL,UAAA6M,eAAK,SAAA9E,GAjCG,IAkCMoG,EAAgC,iBAAfpG,EAAK7H,MAAqB6H,EAAK7H,MAAQ6H,EAAK7H,MAAMR,KAAKiG,WACxEzF,EAA8B,iBAAf6H,EAAK7H,MAAqB6H,EAAK7H,MAAQ6H,EAAK7H,MAAMR,KAAKkG,YAhC5E,OAARvG,OAAAiE,UACeyE,EAkCK7H,OAnCpBiN,KAEYA,EAACzN,KAkCKiE,SAASgC,WAAYwI,EAjC3BhB,EAACzN,KAkCKiE,SAASiC,YAAa1F,EArCxCiN,WA8CK5B,EAALvL,UAAAkM,iBAAK,SAAAhM,GAAA,IAALuL,EAAA/L,KAlCQ,IAmCKQ,IAASR,KAAM0G,oBAlChB,SAGJ,IAmCMgI,EAAe1O,KAAKiE,SAASuB,WAjCnC,OAmCOxF,KAAK2O,kBAAkBnG,OAAO,SAACH,GAlClC,IAmCMuG,GAAoBF,GAAuB3C,EAAK9H,SAAS4K,KAAKC,KAAK,SAAAtM,GAlCrE,IAmCM0D,EAAa6F,EAAK9H,SAASiC,WAhCjC,OAiCmC,iBAAd1D,EAAIuM,MAAqBvM,EAAIuM,MAAQvM,EAAIuM,MAAM7I,MAEnDmC,EAAK0D,EAAK7F,cAhC/B,OAmCO6F,EAAKjF,WAAWtG,EAAO6H,KAAuB,IAAduG,KAO9C/C,EAALvL,UAAA2M,SAAK,SAAArF,GAjCG5H,KAkCK4H,MAAQA,EAAMoH,MAAM,EAAGhP,KAAK4G,cAAgBgB,EAAMwE,SAc1DP,EAALvL,UAAAkN,cAAK,SAAA1K,GAAA,IAALiJ,EAAA/L,KA3BQ,OAPAA,KAmCK2O,kBAAoB7L,EAAKyH,IAAI,SAAAlC,GAlC9B,MAmCuB,iBAATA,GAnC1BoF,KACgBA,EAAC1B,EAmCK9F,WAAYoC,EAlClBoF,EAAC1B,EAmCK7F,YAAamC,EACnCoF,GAAgBpF,UAGDrI,MAmCV6L,EAALvL,UAAA+M,gBAAK,SAAApL,GAlCG,OAFAjC,KAqCKiE,SAASgL,UAAYhN,EAEnBjC,QA7Yf,GA+YO6L,EAAP5K,aACEC,KAAMmK,EAAAA,UAAWjK,OApCfkK,SAqCU,qBApCVE,SAqCU,i6BAwBbK,EAADvK,eAAC,WAAA,QAlCAJ,KAAMgO,EAAAA,YAqCArD,EAAPnD,gBAlCApC,WAmCepF,KAAMyK,EAAAA,UAAWvK,MAAM+N,EAAAA,eAlCtCC,YAmCgBlO,KAAMmO,EAAAA,gBAAiBjO,MAAMkO,EAAAA,eAlC7C9I,SAmCatF,KAAMyH,EAAAA,QAlCnBlC,oBAmCwBvF,KAAMyH,EAAAA,QAlC9BjC,sBAmC0BxF,KAAMyH,EAAAA,QAlChCmE,yBAmC6B5L,KAAMyH,EAAAA,QAlCnChC,oBAmCwBzF,KAAMyH,EAAAA,QAlC9B/B,eAmCmB1F,KAAMyH,EAAAA,QAlCzB1C,YAmCgB/E,KAAMyH,EAAAA,QAlCtBzC,aAmCiBhF,KAAMyH,EAAAA,QAlCvB7B,aAmCiB5F,KAAMyH,EAAAA,QAlCvBpC,eAmCmBrF,KAAMyH,EAAAA,QAlCzB9B,WAmCe3F,KAAMyH,EAAAA,QAlCrBgG,oBAmCwBzN,KAAMyH,EAAAA,QAlC9B2F,iBAmCqBpN,KAAMqO,EAAAA,aAAcnO,MAAM,mBAlC/CmN,eAmCmBrN,KAAMqO,EAAAA,aAAcnO,MAAM,kBChd7C,IAAAoO,EAAA,kBAAA,WAGYxP,KAAZiC,MAA4B,QAH5B,GAIOuN,EAAPvO,aACEC,KAAMmK,EAAAA,UAAWjK,OADfkK,SAEU,aADVC,QAEQ,oaAgBRC,SAEU,gEACViE,YACIC,EAAAA,QAEQ,OADJzN,EAAAA,MAEM,OAAQ0N,EAAAA,OAAOC,MAAO,EAAGC,QAAS,KADxCC,EAAAA,WAEW,mBADPC,EAAAA,QAEQ,IAAKC,EAAAA,WADTL,EAAAA,OAEOE,QAAS,EAAGrJ,OAAQ,EAAGoJ,MAAO,MAAOK,aAAc,SAD1DN,EAAAA,OAEOE,QAAS,EAAGrJ,OAAQ,GAAKoJ,MAAO,QADvCD,EAAAA,OAEOE,QAAS,GAAKrJ,OAAQ,EAAGoJ,MAAO,OAAQK,aAAc,qBAQhFT,EAADlO,eAAC,WAAA,UAEMkO,EAAP9G,gBACAzG,QAAYf,KAAMyH,EAAAA,SCrCI,OAAgBuH,cACnB,OAAgBC,WADnC,IAIMC,EAA8B,oBAAXC,OAAyBA,OAAOD,WACrDE,UAAW,SACXC,OAAQ,cAGNC,EAAW,SAASC,KAAKL,EAAUE,YAAc,aAAaG,KAAKL,EAAUG,QACnFG,EAAA,WAqFA,SAAAA,EAuBuBC,EACAC,EACCC,GAFD7Q,KAAvB2Q,QAAuBA,EACA3Q,KAAvB4Q,SAAuBA,EACC5Q,KAAxB6Q,MAAwBA,EAhElB7Q,KAANoJ,UAAM,EAMApJ,KAAN8Q,SAAM,IAAAhI,EAAAA,aAMA9I,KAAN+Q,SAAM,IAAAjI,EAAAA,aAMA9I,KAAN+I,OAAM,IAAAD,EAAAA,aAMA9I,KAANkL,UAAM,IAAApC,EAAAA,aAMA9I,KAANgR,YAAM,IAAAlI,EAAAA,aAaD9I,KAALiR,SAAK,EAYAjR,KAALkR,YAAK,cAxCLvR,OAAA8H,eAoBKiJ,EApBLpQ,UAAA,YAAAoH,IAAA,WACQ,MAoB6B,iBAAf1H,KAAK+O,QAA8C,IAAxB/O,KAAK+O,MAAMoC,0CAiCvDT,EAALpQ,UAAA8Q,OAAK,SAAAjG,GArBOnL,KAsBKmR,UAAYnR,KAAKoJ,WAlBtB+B,GACAA,EAsBOkG,kBAnBXrR,KAsBK2K,QApBL3K,KAsBK8Q,SAAStH,KAAKxJ,KAAK+O,SAM3B2B,EAALpQ,UAAAgR,OAAK,SAAAnG,GApBGA,EAqBOkG,kBApBPrR,KAqBK+Q,SAASvH,KAAKxJ,OAMtB0Q,EAALpQ,UAAAqK,MAAK,WApBG3K,KAqBK2Q,QAAQ1G,cAAcU,SAG9B+F,EAALpQ,UAAAiR,KAAK,WAlBGvR,KAmBKwR,QAAS,GAQjBd,EAALpQ,UAAAmR,QAAK,SAAAlP,GAnBOvC,KAoBKiR,QACa,KApBlB1O,EAoBMmP,QAAiB1R,KAAK2R,gBAAgBpP,GAASF,UAhBzDrC,KAoBKkL,UAAU1B,MAAMjH,MApB7BA,EAoBoCwM,MAAO/O,KAAK+O,SAM3C2B,EAALpQ,UAAAsR,MAAK,WAnBG,IAoBMC,EAAY7R,KAAK2Q,QAAQ1G,cAAc4H,UAnB7CA,EAoBUC,IAAI,SAlBdC,WAoBW,WAAM,OAAAF,EAAUP,OAAO,UAAU,KAM/CZ,EAALpQ,UAAA0R,eAAK,WAnBOhS,KAoBKuF,WAnBLvF,KAoBKiR,QAAU5O,UAAYrC,KAAKiS,qBAQvCvB,EAALpQ,UAAA4R,UAAK,SAAA3P,GAjBH,GAoBKvC,KAAKuF,SApBV,CAIMvF,KAoBK2R,kBAlBL,IAoBMnR,EAAgB+B,EAAMwE,OAAOoL,UAC7BC,EAA+B,iBAAfpS,KAAK+O,MAAqBvO,EApBxDb,OAAAiE,UAqBc5D,KAAO+O,OArBrBtB,KAqB4BA,EAAAzN,KAAMiG,WAAYzF,EArB9CiN,IAGQzN,KAoBK+I,OAAOS,KAAK4I,WAQpB1B,EAALpQ,UAAA+R,gBAAK,SAAAhK,GApBG,MAqBuB,iBAATA,EAAoBA,EAAOA,EAAKrI,KAAKiG,YAb3DtG,OAAA8H,eAsBKiJ,EAtBLpQ,UAAA,mBAAAoH,IAAA,WACQ,OAsBO1H,KAAMmR,WArBRnR,KAsBKiR,SArBNT,GACAxQ,KAsBKsS,2CAOZ5B,EAALpQ,UAAAqR,gBAAK,SAAAxG,GArBG,IAsBM0G,EAAY7R,KAAK2Q,QAAQ1G,cAAc4H,UACvC7H,EAAQhK,KAAKuS,yBApBnBvS,KAsBKiR,SAAU,EArBfY,EAsBUP,OAAO,gBAEZtH,GAjBLhK,KAsBKwS,cAAcxI,GArBnBhK,KAsBK6Q,MAAM4B,gBApBPtH,GACAA,EAsBOuH,kBA9BP1S,KAsBK2S,uBAAuB3S,KAAK+O,QAgBxC2B,EAALpQ,UAAAsS,oBAAK,WAtBG,OAuBO5S,KAAMmR,WAtBRnR,KAuBKoJ,UAtBNpJ,KAuBKsF,YAtBJtF,KAuBKiR,SAObP,EAALpQ,UAAAiS,uBAAK,WAvBG,IAwBMvI,EAAQhK,KAAK6S,qBAtBnB,OAwBO7I,EAAQA,EAAMmI,UAAUzR,OAAS,IAO3CgQ,EAALpQ,UAAAqS,uBAAK,SAAA5D,GAvBG,IAwBM/E,EAAQhK,KAAK6S,qBACbrS,EAAQR,KAAKqS,gBAAgBtD,GAtBnC/E,EAwBMmI,UAAY3R,GAMrBkQ,EAALpQ,UAAA2R,iBAAK,WACqBjS,KAAK2Q,QAAQ1G,cAAc4H,UACnCC,IAAI,gBAtBd9R,KAwBKiR,SAAU,GAOlBP,EAALpQ,UAAAkS,cAAK,SAAAxI,GAAA,IAAL+B,EAAA/L,KAZQ,IAae,SAAA+O,GAvBX,MAwBwB,iBAAVA,EAvBVA,IAwBU/E,EAvBV+E,EAwBMhD,EAAK9F,aAAe+D,EAhB9B8I,CAwBO9S,KAAK+O,OAxBhB,CAIA,IAwBMA,EAA8B,iBAAf/O,KAAK+O,MAAqB/E,GAxBvDyD,KAEgBA,EAACzN,KAwBKkG,YAVH6F,EAAKgD,MAAMhD,EAAK7F,cAAgB6F,EAAKgD,MAAMhD,EAAK9F,WAUtBjG,KAAK+O,MAAM/O,KAAKkG,YAAc8D,EAvB3DyD,EAACzN,KAwBKiG,WAAY+D,EAvBlCyD,GAGQzN,KAwBK+O,MAAQA,EAvBb/O,KAwBKgR,YAAYxH,KAAKuF,WAMzB2B,EAALpQ,UAAAuS,mBAAK,WAvBG,OAwBO7S,KAAK2Q,QAAQ1G,cAAc8I,cAAc,wBApUxD,GAsUOrC,EAAPzP,aACEC,KAAMmK,EAAAA,UAAWjK,OAvBfkK,SAwBU,MAvBVE,SAwBU,0sDAsBVD,QAwBQ,qjCAgDXmF,EAADpP,eAAC,WAAA,QArBAJ,KAAM8R,EAAAA,aACN9R,KAAM+R,EAAAA,YACN/R,KAAMgS,EAAAA,qBAwBAxC,EAAPhI,gBArBAqG,QAsBY7N,KAAMyH,EAAAA,QArBlBrD,YAsBgBpE,KAAMyH,EAAAA,QArBtBpD,WAsBerE,KAAMyH,EAAAA,QArBrB6C,WAsBetK,KAAMyH,EAAAA,QArBrB1C,YAsBgB/E,KAAMyH,EAAAA,QArBtBzC,aAsBiBhF,KAAMyH,EAAAA,QArBvBvG,QAsBYlB,KAAMyH,EAAAA,QArBlB2J,YAsBgBpR,KAAMyH,EAAAA,QArBtBS,WAsBelI,KAAMyH,EAAAA,QArBrBmI,WAsBe5P,KAAMuK,EAAAA,SArBrBsF,WAsBe7P,KAAMuK,EAAAA,SArBrB1C,SAsBa7H,KAAMuK,EAAAA,SArBnBP,YAsBgBhK,KAAMuK,EAAAA,SArBtBuF,cAsBkB9P,KAAMuK,EAAAA,SArBxB+F,SAsBatQ,KAAMiS,EAAAA,YAAa/R,MAAM,kBArBtCuE,SAsBazE,KAAMyK,EAAAA,UAAWvK,MAAMoO,KArBpCiC,UAsBcvQ,KAAMqO,EAAAA,aAAcnO,MAAM,WAAY,cC9cpD,IAECqO,GADGC,EAAAA,QAAQ,aACJzN,EAAAA,MAAM,KAAM0N,EAAAA,OACRE,QAAS,KAEb5N,EAAAA,MAAM,MAAO0N,EAAAA,OACTE,QAAS,KAEbC,EAAAA,WAAW,UACPC,EAAAA,QAAQ,cAAeC,EAAAA,WACnBL,EAAAA,OAAOE,QAAS,EAAGrJ,OAAQ,EAAGjG,UAAW,yBACzCoP,EAAAA,OAAOE,QAAS,GAAKrJ,OAAQ,GAAKjG,UAAW,0BAC7CoP,EAAAA,OAAOE,QAAS,GAAKrJ,OAAQ,GAAKjG,UAAW,wBAC7CoP,EAAAA,OAAOE,QAAS,IAAMrJ,OAAQ,IAAMjG,UAAW,wBAC/CoP,EAAAA,OAAOE,QAAS,EAAGrJ,OAAQ,EAAGjG,UAAW,6BAGjDuP,EAAAA,WAAW,UACPC,EAAAA,QAAQ,cAAeC,EAAAA,WACnBL,EAAAA,OAAOE,QAAS,EAAGtP,UAAW,gBAAiBiG,OAAQ,IACvDmJ,EAAAA,OAAOE,QAAS,EAAGtP,UAAW,oBAAqBiG,OAAQ,KAC3DmJ,EAAAA,OAAOE,QAAS,EAAGtP,UAAW,mBAAoBiG,OAAQ,YCqBpE4M,GAFY,OAAgBC,WAM/BC,QAHUC,EAAAA,kBAITC,YAHa5H,EAAAA,WAAW,WAAM,OAAAI,IAI9ByH,OAHO,IAGLzP,EAAkC4H,EAAAA,WAAW,WAAM,OAAAxE,EAAgBpD,SAASC,WAIlF+H,EAAA,SAAA0H,GAqQA,SAAA1H,EAsFiC4E,EACD+C,GAvFhC,IAAA5H,EAEQ2H,EAFRE,KAAA5T,OAAAA,YAsFiC+L,EAAjC6E,SAAiCA,EACD7E,EAAhC4H,aAAgCA,EAvV1B5H,EAAN7H,eAAM,IAAAF,GAAAE,cAOA6H,EAAN5H,mBAAM,IAAAH,GAAAG,kBAOA4H,EAANzH,aAAM,IAAAN,GAAAM,YAOAyH,EAANxH,sBAAM,IAAAP,GAAAO,qBAOAwH,EAAN3H,UAAM,IAAAJ,GAAAI,SAOA2H,EAANvH,YAAM,IAAAR,GAAAQ,WAOAuH,EAANtH,iBAAM,IAAAT,GAAAS,gBAOAsH,EAANrH,sBAAM,IAAAV,GAAAU,qBAMAqH,EAANpH,eAAM,IAAAX,GAAAW,cAMAoH,EAANnH,OAAM,IAAAZ,GAAAY,MAMAmH,EAANlH,sBAAM,IAAAb,GAAAa,qBAMAkH,EAANjH,SAAM,IAAAd,GAAAc,QAKAiH,EAANhH,YAAM,IAAAf,GAAAe,WAMAgH,EAAN/G,aAAM,IAAAhB,GAAAgB,YAMA+G,EAAN9G,UAAM,IAAAjB,GAAAiB,SAKA8G,EAAN7G,WAAM,IAAAlB,GAAAkB,UAKA6G,EAAN5G,YAAM,IAAAnB,GAAAmB,WAMA4G,EAAN3G,mBAAM,IAAApB,GAAAoB,kBAMA2G,EAAN1G,aAAM,IAAArB,GAAAqB,YAMA0G,EAANzG,WAAM,IAAAtB,GAAAsB,UAMAyG,EAANxG,UAAM,IAAAvB,GAAAuB,SAMAwG,EAANvG,YAAM,IAAAxB,GAAAwB,WAOAuG,EAANtG,gBAAM,IAAAzB,GAAAyB,eAMAsG,EAANrG,UAAM,IAAA1B,GAAA0B,SAaAqG,EAANpG,QAAM,IAAA3B,GAAA2B,OAOAoG,EAAN5C,UAAM,IAAAnF,GAAA4B,SAMAmG,EAANlG,SAAM,IAAA7B,GAAA6B,QAMAkG,EAANjG,UAAM,IAAA9B,GAAA8B,SAMAiG,EAANhG,YAAM,IAAA/B,GAAA+B,WAMAgG,EAAN/F,UAAM,IAAAhC,GAAAgC,SAKA+F,EAAN5F,mBAAM,IAAAnC,GAAAmC,kBAOA4F,EAAN8H,MAAM,IAAA/K,EAAAA,aAOAiD,EAANgF,SAAM,IAAAjI,EAAAA,aAOAiD,EAAN+E,SAAM,IAAAhI,EAAAA,aAOAiD,EAAN/C,QAAM,IAAAF,EAAAA,aAOAiD,EAANhD,OAAM,IAAAD,EAAAA,aAOAiD,EAAN8B,aAAM,IAAA/E,EAAAA,aAOAiD,EAAN+H,QAAM,IAAAhL,EAAAA,aAOAiD,EAANgI,kBAAM,IAAAjL,EAAAA,aAOAiD,EAANiF,YAAM,IAAAlI,EAAAA,aA+BDiD,EAALkD,WAAK,EAsBAlD,EAAL9L,WAAAwN,KAjFQA,EAACuG,MACDvG,EAACwG,MACTxG,GAyFM1B,EAAN1C,gBAAM,IAAAP,EAAAA,aAODiD,EAALzC,eAAK,GAiHAyC,EAALmI,UAAK,SAAA1R,EAAAJ,QAAL,IAAAA,IAAKA,EAAA2J,EAAAnE,MAAAwE,QArFG,IAAMxE,EAAQmE,EAAKnE,MACbmH,EAAQhD,EAAKtG,eAAiBjD,EAAIuJ,EAAK7F,YAAc1D,EAE3DuJ,EAAKnE,MACEA,EAAMoH,MAAM,EAAG5M,GAD9B+R,QAEYpF,GACGnH,EAAMoH,MAAM5M,EAAOwF,EAAMwE,UA+FnCL,EAALqI,UAAK,SAAArF,GAvFG,IAAMrO,EAAO,SAAC2T,EAAevQ,GACzB,MAAsB,iBAARuQ,EAAmBA,EAAI3T,OAAS2T,EAAIvQ,IAGtD,OAARnE,OAAAiE,UACgC,iBAAVmL,EAAqBA,MAD3CtB,KAEYA,EAAC1B,EAAK9F,WAAY8F,EAAKrG,SAAWhF,EAAKqO,EAAOhD,EAAK9F,WAAa8I,EAChEtB,EAAC1B,EAAK7F,YAAa6F,EAAKrG,SAAWhF,EAAKqO,EAAOhD,EAAK7F,YAAc6I,EAH9EtB,WAylBK1B,EAALuI,gBAAK,SAAAxR,GAhGG,IAAMyG,EAAOzG,EAAKyR,cAAcxR,QAAQ,cAExCwG,EAAKiL,MAAMzI,EAAK3G,mBACXmF,IAAI,SAAAlC,GAAQ,OAAA0D,EAAKqI,UAAU/L,KAC3BoM,QAAQ,SAAApM,GAAQ,OAAA0D,EAAKrI,mBAAkB,EAAO2E,KAEnD0D,EAAK+H,QAAQtK,KAAKD,GAElBwI,WAAW,WAAM,OAAAhG,EAAK2I,cAAc,KAAK,mBA13BhDC,EAAD3I,EAAA0H,GAmHA/T,OAAA8H,eAuCMuE,EAvCN1L,UAAA,aAAAoH,IAAA,WACQ,OAuCO1H,KAAKsJ,gBAgEpB3B,IAAA,SA+EK4B,GA9EGvJ,KA+EKsJ,eAAiBC,EA9EtBvJ,KA+EKqJ,gBAAgBG,KAAKD,oCAjDlC5J,OAAA8H,eAwFKuE,EAxFL1L,UAAA,gBAAAoH,IAAA,WACQ,MAwFyB,KAAlB1H,KAAKmJ,SAAkB,KAAO,oCAgBxC6C,EAAL1L,UAAAsU,gBAAK,WAnFG5U,KAsFK6U,yBArFL7U,KAsFK8U,6BArFL9U,KAsFK+U,6BApFD/U,KAsFK6N,aAAamH,UAAU5I,QArF5BpM,KAsFKiV,6BAlFLjV,KAsFKgF,aAAehF,KAAKkF,YArFzBlF,KAsFKkV,wBAlFLlV,KAsFKmF,YArFLnF,KAsFKmV,uBAlFLnV,KAsFKiF,UArFLjF,KAsFKiO,UAAUlD,WAOtBiB,EAAL1L,UAAAmJ,SAAK,WAI8BzJ,KAAKoE,WAAa/B,WArFzCrC,KAsFK4H,OArFL5H,KAsFK4H,MAAMwE,OAASpM,KAAKoE,WAnFzBpE,KAsFKoE,SAAWpE,KAAK4H,MAAMwE,OArF3BgJ,QAsFQC,KTlca,2ESiX/BrV,KAsFKuF,UAAWvF,KAAK0E,sBAA+B1E,KAAKuF,SApFnDvF,KAsFKsV,wBAQRtJ,EAAL1L,UAAAmD,kBAAK,SAAAjB,EAAAJ,GAAA,IAAL2J,EAAA/L,KACcuV,EAAc,SAAAxG,GAAqB,OAAAhD,EAAKyJ,WAAWzG,EAAO3M,IApFhEpC,KAsFK+F,WArFD/F,KAsFK+F,WAAWvD,GArFX8K,QACAC,UAsFUgI,GAAeA,EAAY/S,IAQjDwJ,EAAL1L,UAAAoD,kBAAK,SAAA+R,EAAAjT,EAAAJ,GAAA,IAAL2J,EAAA/L,KApFQ,GAqFKwC,EArFL,CAIA,IAqFM+S,EAAc,SAAAxG,GApFhB,OAqFOhD,EAAK2J,QAAQD,EAAkB1G,EAAO3M,IAlFjDpC,KAqFKgG,SApFDhG,KAqFKgG,SAASxD,GApFT8K,QACAC,UAqFUgI,GAAeA,EAAY/S,KAyCjDwJ,EAAL1L,UAAAqV,WAAK,SAAAtN,EAAAmB,QAAL,IAAAA,IAAKA,GAAL,GAC2BnB,GAAwB,iBAATA,GAAqBA,EAAK8I,UAE1CnR,KAAK4V,cAAgBvN,IApFvCrI,KAwFK4V,YAAcvN,EAtFfmB,GACAxJ,KAwFK8Q,SAAStH,KAAKnB,KAU1B2D,EAAL1L,UAAAuV,WAAK,SAAAC,EAAA3K,GAAA,IAALY,EAAA/L,KAvFQA,KAwFKC,UAAU6V,GAAWrB,QAAQ,SAAAsB,GAAY,OAAAA,EAASnC,KAAK7H,EAAMZ,MAQrEa,EAAL1L,UAAA0V,cAAK,SAAAlT,GAvFG,IAwFMP,EAAQO,EAAKP,MACbuB,EAAMvB,EAAMmP,SAAWnP,EAAM0T,MAtFnC,OAAQC,EAwF4BpS,IAvFhC,KAwFKqS,EAvFD,GAAInW,KAwFK4V,aAAe5V,KAAKsF,UAAW,CAvFpC,IAwFMlD,EAAQpC,KAAK4H,MAAMT,QAAQnH,KAAK4V,aAvFtC5V,KAwFKyD,kBAAkBzD,KAAK4V,YAAaxT,GAtF7C,MACJ,KAwFK+T,EAvFDnW,KAwFKoW,UAAUtT,EAAKiM,MT3iBhB,QSodJ,MACJ,KAwFKoH,EArFL,KAwFKA,EAvFDnW,KAwFKoW,UAAUtT,EAAKiM,MAAOsH,GAvF3B,MACJ,QACI,OAIR9T,EAwFMmQ,kBAQT1G,EAAL1L,UAAAoU,cAAK,SAAAlU,GACmBR,KAAKsW,aAGbC,SAAS/V,IAOpBwL,EAAL1L,UAAAgW,WAAK,WAzFG,OA0FoBtW,KAAKiO,UAAW,OAQvCjC,EAAL1L,UAAAqK,MAAK,SAAA6L,EAAAC,QAAL,IAAAD,IAAKA,GAAL,QAAA,IAAAC,IAAKA,GAAL,GAzFYzW,KA0FK2T,aAAa9P,SAAS,cAtF/B7D,KA0FK2V,WAAWtT,WAAW,GAxFvBmU,IACAxW,KA0FKiO,UAAUtD,QAzFf3K,KA0FKgJ,QAAQQ,KAAKxJ,KAAKwO,cAO9BxC,EAAL1L,UAAAsK,KAAK,WAzFG5K,KA0FK8H,YAxFL9H,KA0FK+I,OAAOS,KAAKxJ,KAAKwO,YAOzBxC,EAAL1L,UAAAkK,UAAK,WA1FG,OA2FOxK,KAAKiO,WAAajO,KAAKiO,UAAUzD,aAO3CwB,EAAL1L,UAAAuJ,eAAK,WA3FG,OA4FO7J,KAAKiO,WAAajO,KAAKiO,UAAUpE,kBAQ3CmC,EAAL1L,UAAAoW,kBAAK,WA3FG,IA4FMlL,EAAWxL,KAAKoP,UAAYpP,KAAKoP,UAAU9B,MAAQjL,UACnDsU,EAAe3W,KAAKsG,UAAYtG,KAAKsG,SAAS8I,UA3FhDpP,KA4FKsG,SAAS8I,UAAU9B,MAAQjL,UA1FpC,OA4FOuU,QAAQpL,GAAYA,IAAamL,IAtFhDhX,OAAA8H,eA6FKuE,EA7FL1L,UAAA,mBAAAoH,IAAA,WACQ,OA6FO1H,KAAKoE,WAAa/B,WA5FrBrC,KA6FK4H,MAAMwE,QAAUpM,KAAKoE,0CAvFtCzE,OAAA8H,eA8FKuE,EA9FL1L,UAAA,aAAAoH,IAAA,WACQ,IA8FMgC,EAAO1J,KAAKiO,UAAUzN,MA5F5B,OA8FOkJ,EAAOA,EAAKlJ,MAAQ,oCAQ9BwL,EAAL1L,UAAAuW,cAAK,SAAAtU,EAAAC,EAAAJ,GA3FGG,EA4FM8O,kBA1FN,IA4FMhJ,GAASyO,KAAM9W,KAAK8F,SAAUtD,IA5F5CA,EA4FiDJ,MA5FjDA,GAEQpC,KA4FK2T,aAAa1Q,UAAUjD,MA3F5BA,KA4FK2T,aAAarR,eAAeC,EAAO8F,GA3FxCrI,KA4FK2T,aAAahQ,UAAUzB,UAAU,EAAME,MA5FpDA,KAmGK4J,EAAL1L,UAAAyW,WAAK,SAAAxU,EAAAH,GA1FGpC,KA2FK2T,aAAahQ,UAAUxB,UAAU,IA1FtCnC,KA2FK2T,aAAaxQ,YAAYnD,MAzF9BuC,EA2FMmQ,kBAQT1G,EAAL1L,UAAA+C,aAAK,SAAAd,EAAAH,GA1FG,IA2FMiG,EAAOrI,KAAK2T,aAAa9Q,eAAeN,GAzF1C8F,EA2FKyO,OAAS9W,KAAK8F,WAvFvB9F,KA2FK2T,aAAatQ,aAAagF,EAAK7F,IAAK6F,EAAKjG,MAAOA,GAzFrDG,EA2FMmQ,iBA1FNnQ,EA2FM8O,oBAMTrF,EAAL1L,UAAA0W,WAAK,WA1FG,IA2FMC,EAAajX,KAAK2T,aAAavQ,WAAapD,KAC5CgX,EAAahX,KAAK2T,aAAa9P,SAAS,YAzF9C,OA2FO+S,QAAQK,GAAcD,IAQhChL,EAAL1L,UAAA4W,aAAK,SAAAC,EAAA/U,GA1FGpC,KA2FK4H,MAAMxF,GAAS+U,EA1FpBnX,KA2FK4K,QAQRoB,EAAL1L,UAAA8W,QAAK,SAAA/O,GA3FG,OA4FOA,EAAKrI,KAAKkG,aAQpB8F,EAAL1L,UAAA+W,WAAK,SAAA7U,EAAAiT,GAAA,IAAL1J,EAAA/L,UAAA,IAAAyV,IAAKA,GAAL,GAzFQ,IA0FqBzV,KAAKsG,SAAWtG,KAAKsG,SAAS+H,aAAehM,aAE9CoT,EA3FhB,OA4FO,EAzFX,IA4FM6B,EAAOtX,KAAKuX,SAAS/U,EAAKiT,GAzFhC,IA4FKzV,KAAKwF,YAAc8R,GAAQtX,KAAKqF,YAAa,CA3F9C,IA4FM0J,EAAQ/O,KAAK6O,KAAK2I,KAAK,SAAAhV,GA3FzB,OA4FOuJ,EAAK3D,aAAa5F,EAAIuM,SAAWhD,EAAK3D,aAAakP,KAzF1DvI,GACAA,EA4FM6C,QAxFd,IA4FM6F,EAAqBhC,GAAoBzV,KAAK0E,qBAE9CgT,IA1FDJ,IA4F4B,IAApBtX,KAAKwF,YAGW,IA5FzBxF,KA4FKmM,gBAzFJ,IA4FsD,IAA9BnM,KAAK0E,sBAzFlC,OA4FOgT,EAAWlP,OAAO,SAAAH,GAAQ,OAAAA,IAAM+D,SAAWsL,EAAWtL,QAQhEJ,EAAL1L,UAAA8V,UAAK,SAAA/N,EAAAsP,GA3FG,IA4FMC,EAAS5X,KAAK6O,KAAKgJ,KAAK9I,QAAU1G,EAClCyP,EAAU9X,KAAK6O,KAAKvB,MAAMyB,QAAU1G,EAxF1C,KAyFmBsP,IAAetB,GAAkBuB,GTpxBxC,SSyrBPD,GA4FgCG,GA1FrC,CAKA,IA4FMtR,EAASmR,IAActB,EAAiB,GAAI,EAC5CjU,EAAQpC,KAAK+X,YAAY1P,GAAQ7B,EACjChE,EAAMxC,KAAKgY,cAAc5V,GA1F/B,OA4FOI,EAAI4O,OAAOwC,KAAKpR,GApGnBxC,KA4FK2K,OAAM,IAelBqB,EAAL1L,UAAAyX,YAAK,SAAA1P,GAzFG,OA0FarI,KAAK6O,KAAKoJ,UAEXC,UAAU,SAAA1V,GAAO,OAAAA,EAAIuM,QAAU1G,KAO9C2D,EAAL1L,UAAA0X,cAAK,SAAA5V,GAzFG,OA0FapC,KAAK6O,KAAKoJ,UAEX7V,IASf4J,EAAL1L,UAAAkV,WAAK,SAAAhT,EAAAJ,GA3FGpC,KA4FK4H,MAAQ5H,KAAKuI,gBAAgBnG,GAzF9BpC,KA4FK4V,cAAgBpT,GA3FrBxC,KA4FK2V,WAAWtT,WAAW,GAxF/BrC,KA4FK2K,OAAM,GAAM,GAzFjB3K,KA4FK+Q,SAASvH,KAAKhH,IAStBwJ,EAAL1L,UAAAoV,QAAK,SAAAD,EAAApN,EAAAjG,GAAA,IAAL2J,EAAA/L,UAAA,IAAAyV,IAAKA,GAAL,GA1FQ,IA2FM1G,EAAQ/O,KAAKsI,eAAeD,GAjDlC8P,EAAAA,WACKC,GA+FGrJ,GA9FHzB,QACA9E,OA+FO,WAAM,MAAiB,KAAjBuG,EAAMrO,SA9FnB6J,IA+FI,WAAM,OAAAlC,IA9FVkC,IA+FIvK,KAAKoU,WA9FT5L,OA6DJ,SAAAhG,GA7FG,IAAM6V,EAAUtM,EAAKsL,WAAW7U,EAAKiT,IAAqB1J,EAAKkC,UAAUvE,KAAK4O,MAM9E,OAJKD,GACDtM,EAAKgI,kBAAkBvK,KAAKhH,GAGzB6V,IA2BN9K,UA0EJ,SAAA/K,GA9FGuJ,EAAKmI,UAAU1R,EAAKJ,GAGpB2J,EAAK8H,MAAMrK,KAAKhH,GAEXuJ,EAAKzF,WAIVyF,EAAKzF,SAAS0G,OACdjB,EAAKzF,SAASI,oBAAsBqF,EAAKzF,SAAS4F,OAAS7J,YAyGnCA,UAhD3B,WA1FG0J,EAAK2I,cAAc,IAGnB3I,EAAKpB,OAAM,GAAM,MA6IxBqB,EAAL1L,UAAAwU,2BAAK,WAAA,IAAL/I,EAAA/L,KACcuY,EAAmBvY,KAAKmE,kBAAkBiI,OAAS,GAAKpM,KAAKkE,cAAckI,OAAS,EApF1FxM,EA+FOgU,KAAK5T,KAAMgU,EAVD,SAAA7I,GA9Fb,IA+FMqN,EAAazM,EAAK5H,kBAAkBgD,QAAQgE,EAAOuG,UAAY,EAC/D+G,EAAS1M,EAAK7H,cAAciD,QAAQgE,EAAOrH,MAAQ,GA7FrD0U,GA+FcC,KA9FdtN,EA+FOuH,iBA9FP3G,EA+FKrI,mBAAkB,EAAOqI,EAAKyC,aAII+J,IAMlDvM,EAAL1L,UAAAuU,uBAAK,WAAA,IAAL9I,EAAA/L,KAnFQJ,EA+FOgU,KAAK5T,KAAMgU,EAXD,SAAA7I,IAC2B,KAAnBA,EAAOuG,SAAqC,IAAnBvG,EAAOuG,WA5FhD3F,EA+FKyC,WA9FNzC,EA+FKnE,MAAMwE,QA9FXL,EA+FK8C,KAAKgJ,KAAKzG,OAAOwC,KAAK7H,EAAK8C,KAAKgJ,SAWhD7L,EAAL1L,UAAAyU,2BAAK,WAAA,IAALhJ,EAAA/L,KA9FQA,KA+FKiO,UAAU/E,UAAUqE,UAAU,SAAAhL,GA9F/BwJ,EA+FK8J,WAAW,UAAWtT,GAET,cA/FdA,EA+FMuB,KAA0C,KAAnBiI,EAAKyC,WA9FlCjM,EA+FMmQ,oBAQjB1G,EAAL1L,UAAA6U,qBAAK,WA9FG,IA+FMnL,EAAQhK,KAAKiO,UAAUjE,MAAMC,cA5FnCjK,KA+FK4Q,SAAShR,OAAOoK,EAAO,QAAShK,KAAKsU,kBAM7CtI,EAAL1L,UAAA2U,0BAAK,WAAA,IAALlJ,EAAA/L,KA9FQA,KA+FKiO,UAAUvE,KA9FVgP,aACA3K,aA+Fa/N,KAAK6E,sBA9FlB0F,IA+FI,WAAM,OAAAwB,EAAKyC,YA9FfjB,UA+FU,SAAC/M,GAAkB,OAAAuL,EAAK8B,aAAarE,KAAKhJ,MAM5DwL,EAAL1L,UAAA4U,sBAAK,WAAA,IAALnJ,EAAA/L,KA1FQA,KA+FKiO,UA9FAlF,OACAP,OAyFY,WA9Fb,QA+FSuD,EAAKzF,UAAYyF,EAAKzF,SAASqG,YAAgBZ,EAAKyC,aAzF5DjB,UA+FU,WA9FHxB,EA+FK7G,WA9FL6G,EA+FKrI,mBAAkB,EAAOqI,EAAKyC,WA5FvCzC,EA+FK2I,cAAc,OAU9B1I,EAAL1L,UAAAiX,SAAK,SAAA/U,EAAAiV,GAAA,IAAL1L,EAAA/L,KAEc2Y,EAAKnW,EADQiV,EAAqBzX,KAAKsG,SAASJ,WAAalG,KAAKkG,YA7FxE,OAgGOlG,KAAK4H,MAAM4P,KAAK,SAAAnP,GAAQ,OAAA0D,EAAK3D,aAAaC,KAAUsQ,KAsB9D3M,EAAL1L,UAAAgV,qBAAK,WAhGGtV,KAiGK4Y,mBAhGDpY,MAiGO,KAhGPqY,OAAZlZ,OAAAiE,UAiGsB5D,KAAOmG,uBAn+B7B,CADCoB,GAu+BMyE,EAAP/K,aACEC,KAAMmK,EAAAA,UAAWjK,OAhGfkK,SAiGU,YAhGVwN,WAiGW1F,GAhGX7H,QAiGQ,iydAkWRC,SAiGU,m2GAjBdiE,WAAIA,MAqGHzD,EAAD1K,eAAC,WAAA,QA9FAJ,KAAM+R,EAAAA,YACN/R,KAAMc,KAiGAgK,EAAPtD,gBA9FAxE,gBA+FoBhD,KAAMyH,EAAAA,QA9F1BxE,oBA+FwBjD,KAAMyH,EAAAA,QA9F9BrE,cA+FkBpD,KAAMyH,EAAAA,QA9FxBpE,uBA+F2BrD,KAAMyH,EAAAA,QA9FjCvE,WA+FelD,KAAMyH,EAAAA,QA9FrBnE,aA+FiBtD,KAAMyH,EAAAA,QA9FvBlE,kBA+FsBvD,KAAMyH,EAAAA,QA9F5BjE,uBA+F2BxD,KAAMyH,EAAAA,QA9FjChE,gBA+FoBzD,KAAMyH,EAAAA,QA9F1B/D,QA+FY1D,KAAMyH,EAAAA,QA9FlB9D,uBA+F2B3D,KAAMyH,EAAAA,QA9FjC7D,UA+Fc5D,KAAMyH,EAAAA,QA9FpB5D,aA+FiB7D,KAAMyH,EAAAA,QA9FvB3D,cA+FkB9D,KAAMyH,EAAAA,QA9FxB1D,WA+Fe/D,KAAMyH,EAAAA,QA9FrBzD,YA+FgBhE,KAAMyH,EAAAA,QA9FtBxD,aA+FiBjE,KAAMyH,EAAAA,QA9FvBvD,oBA+FwBlE,KAAMyH,EAAAA,QA9F9BtD,cA+FkBnE,KAAMyH,EAAAA,QA9FxBrD,YA+FgBpE,KAAMyH,EAAAA,QA9FtBpD,WA+FerE,KAAMyH,EAAAA,QA9FrBnD,aA+FiBtE,KAAMyH,EAAAA,QA9FvBlD,iBA+FqBvE,KAAMyH,EAAAA,QA9F3BjD,WA+FexE,KAAMyH,EAAAA,QA9FrB+C,YA+FgBxK,KAAMyH,EAAAA,QA9FtBhD,SA+FazE,KAAMyH,EAAAA,QA9FnBQ,WA+FejI,KAAMyH,EAAAA,QA9FrB9C,UA+Fc3E,KAAMyH,EAAAA,QA9FpB7C,WA+Fe5E,KAAMyH,EAAAA,QA9FrB5C,aA+FiB7E,KAAMyH,EAAAA,QA9FvB3C,WA+Fe9E,KAAMyH,EAAAA,QA9FrBxC,oBA+FwBjF,KAAMyH,EAAAA,QA9F9BkL,QA+FY3S,KAAMuK,EAAAA,SA9FlBsF,WA+Fe7P,KAAMuK,EAAAA,SA9FrBqF,WA+Fe5P,KAAMuK,EAAAA,SA9FrBzC,UA+Fc9H,KAAMuK,EAAAA,SA9FpB1C,SA+Fa7H,KAAMuK,EAAAA,SA9FnBoC,eA+FmB3M,KAAMuK,EAAAA,SA9FzBqI,UA+Fc5S,KAAMuK,EAAAA,SA9FpBsI,oBA+FwB7S,KAAMuK,EAAAA,SA9F9BuF,cA+FkB9P,KAAMuK,EAAAA,SA9FxBnF,WA+FepF,KAAM6X,EAAAA,aAAc3X,MAAMyK,KA9FzCuD,YA+FgBlO,KAAMmO,EAAAA,gBAAiBjO,MAAMkO,EAAAA,aAAgB0J,aAAa,MA9F1E/K,YA+FgB/M,KAAMyK,EAAAA,UAAWvK,MAAMwH,KA9FvCiG,OA+FW3N,KAAM+X,EAAAA,aAAc7X,MAAMsP,KA9FrCrH,kBA+FsBnI,KAAMuK,EAAAA,SA9F5ByN,eA+FmBhY,KAAMiS,EAAAA,YAAa/R,MAAM,oBCnnD5C,IAAA+X,EAAA,kBAAA,aAAA,GAEyCA,EAAzClY,aACEC,KAAMmK,EAAAA,UAAWjK,OADfkK,SAEU,cADVE,SAEU,qjBAMVD,QAEQ,k9RAsRX4N,EAAD7X,eAAC,WAAA,UCtRD,IAAM8X,EAAkB,IAAIhS,EAC5BiS,EAAA,WAAA,SAAAA,YAOKA,EAALC,aAAK,SAAAhS,GAAG8R,EACgB/R,WAAWC,MARnC,GAUO+R,EAAPpY,aACEC,KAAMqY,EAAAA,SAAUnY,OAAdoY,SACIC,EAAAA,aACAC,EAAAA,oBACAC,EAAAA,YACAC,EAAAA,mBAEJC,cACI7N,EACAmN,EACAvQ,EACA8H,EACArQ,EACAwL,EACA2D,GAEJsK,SACI9N,EACAmN,EACAvQ,EACA8H,EACArQ,EACAwL,EACA2D,GAEJsJ,WACI9W,GAEEsR,QAASyG,EAAAA,wBAAyBC,UAAU,QAKrDX,EAAD/X,eAAC,WAAA"}
